{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jetpack Compose Playground","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This is a community-driven collection of Jetpack Compose documentation/examples/tutorials and demos.</p>"},{"location":"#show-some-and-star-the-repo-to-support-the-project","title":"Show some  and star the repo to support the project","text":""},{"location":"#what-is-jetpack-compose","title":"What is Jetpack Compose?","text":"<p>\u201cJetpack Compose is a modern toolkit for building native Android UI. Jetpack Compose simplifies and accelerates UI development on Android with less code, powerful tools, and intuitive Kotlin APIs. \u201c</p>"},{"location":"#composable-of-the-week","title":"Composable of the week!! \ud83c\udf89","text":"<p>The LazyVerticalGrid</p>"},{"location":"#new-to-compose","title":"New to Compose?","text":"<p>Check Project Setup or Hello World Compose</p>"},{"location":"#animation","title":"Animation","text":"<ul> <li>Crossfade</li> </ul>"},{"location":"#layouts","title":"Layouts","text":"<ul> <li>ConstraintLayout</li> <li>Scaffold</li> <li>Column</li> <li>Row</li> <li>Box</li> </ul>"},{"location":"#foundation","title":"Foundation","text":"<ul> <li>Canvas</li> <li>Image</li> <li>LazyColumn</li> <li>LazyRow</li> <li>LazyVerticalGrid</li> <li>Shape</li> <li>Text</li> </ul>"},{"location":"#material","title":"Material","text":"<ul> <li>AlertDialog</li> <li>Button</li> <li>Card</li> <li>Checkbox</li> <li>CircularProgressIndicator</li> <li>DropdownMenu</li> <li>FloatingActionButton</li> <li>ModalDrawerLayout</li> <li>RadioButton</li> <li>Scaffold</li> <li>Slider</li> <li>Snackbar</li> <li>Switch</li> <li>TextField</li> </ul>"},{"location":"#looking-for-tutorialssample-code","title":"Looking for tutorials/sample code","text":"<p>Take a look at the sidebar under \u201cGuides &amp; Samples\u201d or check Compose projects</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Interested in adding samples/tutorials? Check Contributing</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License - see the LICENSE.md file for details</p>"},{"location":"community/","title":"Community","text":"<p>Slack: join the Kotlin Slack and the #compose channel</p> <p>Bugtracker https://issuetracker.google.com/issues/new?component=612128</p> <p>Stackoverflow</p>"},{"location":"compose_projects/","title":"Compose Projects","text":"<p>A list of projects that are related to Jetpack Compose. If you want to add an entry, please edit the table and send PR.</p>"},{"location":"compose_projects/#example-apps","title":"Example Apps","text":"Name Description Jetpack Compose Playground Collection of Jetpack Compose example code  . Compose Pokedex Pokedex on Jetpack Compose. Compose Samples Repository This repository contains a set of individual Android Studio projects to help you learn about Compose in Android. PeopleInSpace Minimal Kotlin Multiplatform project using Jetpack Compose and SwiftUI ComposeClock Particle clock created with Jetpack Compose framework JetDelivery JetDelivery is a sample food delivery app, built with Jetpack Compose. Learn Jetpack Compose By Example This project contains various examples that show how you would do things the \u201cJetpack Compose\u201d way Full Compose Cookbook with Demo UIs This project showcase all UI, Widgets, Animations and Demo UI samples. JetInstagram An Instagram UI clone app built with \u201cJetpack Compose\u201d with Like Button Animation and instagram reels feature with exoplayer. DisneyCompose A demo Disney app using compose and Hilt based on modern Android tech-stacks and MVVM architecture. Fetching data from the network and integrating persisted data in the database via repository pattern. Declarative UI version of the DisneyMotions using compose. Compose Multiplatform Compose Kotlin UI framework port for desktop platforms (macOS, Linux, Windows), components outside of the core. Compose Slack Desktop A Slack demo app for desktop using Jetpack Compose UI toolkit FlappyBird FlappyBird made with Jetpack Compose. JetSpotify This is a Spotify App made in Jetpack Compose having Spotify Android UI and functionality using Spotify SDK and web API. JetPic Express A simple photo editing app that allows you to apply stunning filters and share it to the world. This app was built using the latest Jetpack Compose UI for Modern Native Android UI development."},{"location":"compose_projects/#libraries","title":"Libraries","text":"Name Description accompanist A collection of extension libraries for Jetpack Compose Showkase Showkase is an annotation-processor based Android library that helps you organize, discover, search and visualize Jetpack Compose UI elements Decompose Lifecycle-aware components for Jetpack Compose with routing functionality Compose Router Routing functionality for Jetpack Compose with back stack Compose Glide Image Simple Glide library adaptation for Jetpack Compose. Compose Navigation Compose Backstack Simple composable for rendering transitions between backstacks. SwipeReveal-Compose A layout that you can swipe to show action buttons. Exploding Composable Explosive dust effect animation for your composables! Landscapist \ud83c\udf42 Jetpack Compose image loading library which can fetch and display network images using Glide, Coil, and Fresco."},{"location":"compose_projects/#websites","title":"Websites","text":"Name Description Compose.Academy Jetpackcompose.app Jetpack Compose \u4e2d\u6587\u6587\u6863 JetpackComposeVersion.com A page to quickly check what the latest version of Jetpack Compose is and its dependencies. Composables.co Articles &amp; resources for Jetpack Compose"},{"location":"compose_projects/#compose-for-web","title":"Compose for Web","text":"Name Description HtmlToComposeWebConverter Intellij Idea Plugin that can convert HTML to Compose for Web code. https://plugins.jetbrains.com/plugin/18261-html-to-compose-web-converter Compose-Snake-Web This is a Compose for Web port of CompoSnake."},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#to-jetpack-compose","title":"to Jetpack Compose","text":"<p>If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128</p>"},{"location":"contributing/#to-this-project","title":"to this project","text":"<p>This project is using MkDocs and the MkDocs-Material Theme to generate the pages for Github. The markdown files are located in /docs. The generated files for the GitHub page are in /site. Do not make changes in this folder, they will be overridden.</p> <ul> <li> <p>Install plugins</p> <pre><code>pip3 install mkdocs-minify-plugin\npip3 install mkdocs-git-revision-date-localized-plugin\npip3 install mkdocs-minify-plugin\npip3 install mkdocs-macros-plugin\n</code></pre> </li> <li> <p>Run docs locally</p> <p>To start the mkdocs server locally, run mkdocs serve in a terminal in the project folder.</p> </li> <li> <p>Add/Change docs</p> <p>The docs are written in markdown files which are all in /docs. To change the navigation sidebar, you need to edit the mkdocs.yml.</p> </li> <li> <p>Build the docs</p> <p>When you run mkdocs build in a terminal in the project folder, the html files be generated to /site.</p> <p>When deployed, these files are built for GitHub Pages using a workflow.</p> </li> </ul> <p>Feel free to change/add files and send a pull request.</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#talks","title":"Talks","text":"Name Description Thinking in Compose Jetpack Compose is the new next generation UI toolkit. It uses a declarative component based paradigm for building UIs easily and quickly. It\u2019s written entirely in Kotlin and embraces the style and ergonomics of the Kotlin language. Compose by example Jetpack Compose is a new declarative UI toolkit built for the demands of creating modern user interfaces. Get started with Compose and learn about the new APIs and Material components that make up the toolkit by examining concrete UIs we\u2019ve created with it. We\u2019ll walk through examples of theming, animation, layout and more, demonstrating how to customize and combine components to build real UIs. We\u2019ll show how the new toolkit simplifies your development experience and enables new possibilities. Compose for existing apps Jetpack Compose is now in alpha and you might want to start adding it to your existing apps. In this talk, you\u2019ll learn how to do that! We\u2019ll cover topics such as: adding Compose to your existing Views and embedding Views in Compose, using your existing View theme and current app architecture in Compose, testing all of that code, and much more. Jetpack Compose Jetpack Compose is Android\u2019s new modern UI toolkit. Learn how Compose simplifies &amp; accelerates your UI development, allowing you to create richer, more robust and responsive UIs. We outline our roadmap, what is ready for use right now, share our direction in areas that are still evolving, and show how the tight integration with tooling makes the development experience even better. Get up to speed with Compose and how it can help you to build better apps! droidcon Online 2020: Become A Composer By Brian Gardner  KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson Jetpack Compose is an ambitious multi-team effort to reimagine Android\u2019s UI Toolkit more than 10 years after the Android Platform launched with the original UI Toolkit. Compose follows a declarative programming model, and the runtime is coupled with a Kotlin compiler plugin to enable a novel new approach to declarative programming. In this talk, Leland will go over the mechanics of how the Compose runtime and compiler plugin work together, demystifying how it can be used to enable efficient and performant user interfaces. In addition, this talk will describe how Compose can operate completely independent of the Android Platform and Compose UI, allowing it to be used as a general language feature for Incremental Computing and the management of tree-like data structures. KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara &amp; Clara #Jetpack Compose is an unbundled UI Toolkit for #Android, designed to simplify UI development. It combines a reactive programming model with the conciseness and ease of use of Kotlin. Learn directly from engineers on the project about the decisions that went into making this toolkit and how a Kotlin-first approach has influenced API design from the project\u2019s inception. What\u2019s New in Jetpack Compose (Android Dev Summit \u201819) Jetpack Compose was announced at Google I/O and the team has been hard at work ever since. This talk introduces Compose to new audiences, including what the project is and how it is taking shape. The talk also updates people who already know about Jetpack Compose, including how the project has evolved. Understanding Compose (Android Dev Summit \u201819) This session covers the benefits of a declarative reactive UI system like Jetpack Compose and how it applies to real problems that Android developers have today. Additionally, this talk expands on the programming model of Jetpack Compose and some of its implementation details the can help you understand how Compose works. #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Missed the #AskAndroid livestream segment of Android Dev Summit 2019? Don\u2019t worry, we got you covered. Hosts Lyla Fujiwara and Dan Galpin are joined by Anna-Chiara Bellini and Adam Powell to discuss Jetpack Compose questions submitted by Android developers online. Anna-Chiara Bellini is a product manager, and Adam Powell is an engineering lead. Google IO19 - Declarative UI patterns Explore how reactive and declarative paradigms can be applied to Android UI development, making it easier for developers to integrate these patterns into their Android apps with Kotlin. DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin -  Jumping into Jetpack Compose way too early to see what\u2019s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let\u2019s Talk Composing UI"},{"location":"resources/#podcasts","title":"Podcasts","text":"Name Description Android Developer backstage - Episode 147: Jetpack Compose Alpha Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09"},{"location":"resources/#other-links","title":"Other Links","text":"Name Description Jetpack Compose Jetpack Compose UI Readme Compose Readme Video - Kotlin and Jetpack Compose <code>#compose</code> channel on Kotlin Slack Compose from first Principles  Jetpack Compose Tutorial  AndroidX Git Compose Release Notes Compse UI Docu Jetpack Compose Twitter Bot Jetpack Compose \u4e2d\u6587\u6587\u6863 <p>Feel free to contribute!</p>"},{"location":"activity/backhandler/","title":"BackHandler","text":""},{"location":"activity/backhandler/#backhandler","title":"BackHandler","text":"<p>You can use BackHandler to detect the presses on the device back button inside of Compose</p>"},{"location":"activity/backhandler/#example","title":"Example","text":"<pre><code>@Composable\nfun BackHandlerExample() {\nvar backPressedCount by remember { mutableStateOf(0) }\nBackHandler(enabled = true, onBack = {\nbackPressedCount += 1\n})\nText(text=\"Backbutton was pressed : $backPressedCount times\")\n}\n</code></pre>"},{"location":"activity/backhandler/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"animation/crossfade/","title":"Crossfade","text":""},{"location":"animation/crossfade/#crossfade","title":"Crossfade","text":"<p>Crossfade can be used to switch between Composables with an crossfade animation.</p> <p>Example video of the code below. On every button click, the content of the screen will change with an animation duration of 3 seconds.</p> <pre><code>enum class MyColors(val color: Color) {\nRed(Color.Red), Green(Color.Green), Blue(Color.Blue)\n}\n\n@Composable\nfun CrossfadeDemo() {\nvar currentColor by remember { mutableStateOf(MyColors.Red) }\nColumn {\nRow {\nMyColors.values().forEach { myColors -&gt;\nButton(\nonClick = { currentColor = myColors },\nModifier.weight(1f, true)\n.height(48.dp)\n.background(myColors.color),\ncolors = ButtonDefaults.buttonColors(backgroundColor = myColors.color)\n) {\nText(myColors.name)\n}\n}\n}\nCrossfade(targetState = currentColor, animationSpec = tween(3000)) { selectedColor -&gt;\nBox(modifier = Modifier.fillMaxSize().background(selectedColor.color))\n}\n}\n}\n</code></pre>"},{"location":"animation/crossfade/#how-does-it-work","title":"How does it work?","text":"<p>As you can see in the video above, this demo consists of a screen with 3 buttons at the top. On a button click, the screen below will change to the selected color.</p> <pre><code>Crossfade(targetState = currentColor, animationSpec = tween(3000)) { selectedColor -&gt;\nBox(modifier = Modifier.fillMaxSize().background(selectedColor.color))\n}\n</code></pre> <p>Crossfade expects some kind of state to detect when it should recompose. In this example, this is currentColor, which is a state with the selected color enum. This state will be set to the current parameter.</p> <p>With the animationSpec parameter, you can set which animation should be used to switch between the Composables. The default parameter here is the tween animation. You can choose between any class that implements AnimationSpec. The 3000 in this example is the duration that the tween animation will have.</p> <p>The last parameter is the body of the Crossfade Composable. Here you have to create the UI that you want to display. selectedColor is the current value of currentColor. In this example i\u2019m using a Box to display the colors. Everytime one of the 3 buttons is clicked, the value of currentColor will change and the Crossfade will recompose with an animation between the old and new UI.</p>"},{"location":"animation/crossfade/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"animation/transistion/","title":"Transistion","text":"<p>WORK IN PROGRESS</p>"},{"location":"animation/transistion/#working-with-transistion","title":"Working with Transistion","text":"Your browser does not support the video tag."},{"location":"animation/transistion/#what-will-we-build","title":"What will we build?","text":"<p>This is might not be a spectacutlar use case for Transistion, but it should give an idea, how to use Transistion. This is example consist of a Text which will print the active value of the Transition state and a padding which will change depending on this state. The value of the Transistion state will change from 0 to 200 over and over again.</p>"},{"location":"animation/transistion/#create-a-transistion-definition","title":"Create a transistion definition","text":"<p>Transistion requires a TransitionDefinition, so let\u2019s build that first.</p> <pre><code>private val paddingTransitionDefinition = transitionDefinition {\n...\n}\n</code></pre> <p>Inside the TransitionDefinition, we have to define all possible transition states and which transition should be used between two transition states. In this example we want to create transition between 0 and 200, so let\u2019s create two states for that.</p> <pre><code>private val paddingPropKey = FloatPropKey()\n\nprivate val paddingTransitionDefinition = transitionDefinition {\nstate(\"A\"){ this[paddingPropKey] = 0f }\nstate(\"B\") { this[paddingPropKey] = 200f }\n...\n}\n</code></pre> <p>Inside transitionDefinition you have to use the state() to define a transition state. It requires a name and a function to initialize a state. paddingPropKey is a FloatPropKey, it\u2019s like a state with a float value. It will be constantly updated with the latest value inside the transition.</p> <p>Now we have two states. One with the Name A and a paddingPropKey value of 0f and one with the Name B and a paddingPropKey value of 200f. Next we have to define a transistion between A and B.</p> <pre><code>private val paddingPropKey = FloatPropKey()\n\nprivate val paddingTransitionDefinition = transitionDefinition {\nstate(\"A\"){ this[paddingPropKey] = 0f }\nstate(\"B\") { this[paddingPropKey] = 200f }\n\ntransition(\"A\" to \"B\") {\npaddingPropKey using repeatable {\nanimation = tween {\nduration = 1000\neasing = FastOutLinearInEasing\n}\niterations = Infinite\n}\n}\n}\n</code></pre> <p>With <pre><code> transition(\"A\" to \"B\")\n</code></pre> a transistion between state A and state B is definied. Inside the transition you have to define how, how long and how often the transition should happen.</p> <p>paddingPropKey using repeatable</p>"},{"location":"compose_for/android_devs/","title":"Compose for Android Developers","text":"<p>This page is inspired by https://flutter.dev/docs/get-started/flutter-for/android-devs.  The goal is to show how common use cases with the classic Android View system, can be done with Compose.</p> Android View Compose Button Button TextView Text EditText TextField ImageView Image LinearLayout(horizontally) Row LinearLayout(vertically) Column FrameLayout Box RecyclerView LazyColumn RecyclerView(horizontally) LazyRow Snackbar Snackbar"},{"location":"compose_for/android_devs/#layouts","title":"Layouts","text":""},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-linearlayout","title":"What is the equivalent of a LinearLayout?","text":"<p>In Android, a LinearLayout is used to lay your widgets out linearly\u2014either horizontally or vertically. With Compose, use the Row or Column composable to achieve the same result.</p> <p>If you notice the two code samples are identical with the exception of the \u201cRow\u201d and \u201cColumn\u201d composable. The children are the same and this feature can be exploited to develop rich layouts that can change overtime with the same children.</p> <pre><code>@Composable\nfun Example() {\nRow {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre> <pre><code>@Composable\nfun Example() {\nColumn {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre>"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-relativelayout","title":"What is the equivalent of a RelativeLayout?","text":"<p>A RelativeLayout lays your widgets out relative to each other. In Compose, there are a few ways to achieve the same result.</p> <p>You can achieve the result of a RelativeLayout by using a combination of Column, Row, and Stack widgets</p>"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-scrollview","title":"What is the equivalent of a ScrollView?","text":"<p>In Android, use a ScrollView to lay out your widgets\u2014if the user\u2019s device has a smaller screen than your content, it scrolls.</p> <p>In Compose, you can use a LazyColumn</p>"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-recyclerview","title":"What is the equivalent of a RecyclerView?","text":"<p>In Compose, you can use a LazyColumn or LazyRow.</p>"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-wrap_content","title":"What is the equivalent of wrap_content?","text":"<p>In the classic Android View system you use wrap_content to set the height/width of a View to the minimun needed value.  </p> <p>In Compose, you can set a Modifier:</p>"},{"location":"compose_for/android_devs/#modifierwrapcontentwidth","title":"Modifier.wrapContentWidth()","text":"<p>Android View equivalent -&gt; android:layout_width=\u201dwrap_content\u201d</p>"},{"location":"compose_for/android_devs/#modifierwrapcontentheight","title":"Modifier.wrapContentHeight()","text":"<p>Android View equivalent -&gt;android:layout_height=\u201dwrap_content\u201d</p>"},{"location":"compose_for/android_devs/#modifierwrapcontentsize","title":"Modifier.wrapContentSize()","text":"<p>Android View equivalent -&gt;android:layout_height=\u201dwrap_content\u201d</p> <p>Android View equivalent -&gt; android:layout_width=\u201dwrap_content\u201d</p> <pre><code>@Composable\nfun Example() {\nRow {\nText(\"Text1\",modifier = Modifier.wrapContentWidth())\nText(\"Text2\",modifier = Modifier.wrapContentHeight())\n}\n}\n</code></pre>"},{"location":"compose_for/android_devs/#working-with-text","title":"Working with Text","text":""},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-textview","title":"What is the equivalent of a TextView?","text":"<p>In Compose you can use a Text to display text</p>"},{"location":"compose_for/android_devs/#what-is-the-equivalent-of-a-edittext","title":"What is the equivalent of a EditText?","text":"<p>The EditText is the standard text entry view in the Android View system. If the user needs to enter text into an app, this is the primary way for them to do that.  In Compose you can use TextField</p>"},{"location":"compose_for/swiftui_devs/","title":"Compose for SwiftUI Developers","text":"SwiftUI Compose Button Button Text Text TextEditor TextField Image Image HStack Row VStack Column ZStack Box LazyVStack LazyColumn LazyHStack LazyRow ScrollView LazyColumn"},{"location":"compose_for/swiftui_devs/#what-is-the-equivalent-of-a-view","title":"What is the equivalent of a View?","text":"<p>In \u201cJetpack Compose\u201d Views are called Composable. They are Kotlin functions that are annotated with @Composable. <pre><code>@Composable fun ComposableDemo(){\nText(\"Hello, World\")\n}\n</code></pre></p>"},{"location":"compose_for/swiftui_devs/#how-to-define-a-state","title":"How to define a state?","text":"<p>In SwiftUI you can use the @State property wrapper to create a state.</p> <pre><code>//SwiftUI\n@State var isActiveState = false\n</code></pre> <p>In Compose you use mutableStateOf() <pre><code>//Compose\nvar isActiveState = mutableStateOf(false)\n</code></pre></p> <p>But this will only create the state. When you want to remember the value of your state in every recomposition, you have to put your state inside remember <pre><code>//Compose\nval isActiveState = remember { mutableStateOf(false) }\n</code></pre></p>"},{"location":"compose_for/swiftui_devs/#what-is-the-equivalent-of-a-viewmodifier","title":"What is the equivalent of a ViewModifier?","text":"<pre><code>//SwiftUI\nstruct ContentView: View {\n    var body : some View {\n        Text(\"Hello, World!\").background(Color.Red).padding(100)\n    }\n}\n</code></pre> <p>In Compose a ViewModifier is called Modifier. You can\u2019t directly append it to a View, you need to apply your modifier as a parameter to a Composable that expects a modifier.</p> <pre><code>//Compose\nText(\"Hello, World\", modifier = Modifier.background(Color.Red).padding(100.dp))\n</code></pre>"},{"location":"compose_for/swiftui_devs/#what-is-the-equivalent-of-environmentobject","title":"What is the equivalent of EnvironmentObject?","text":"<p>For data that should be shared with all views in your entire app, in SwiftUI you can use EnvironmentObject. In Compose this can be done with CompositionLocal</p>"},{"location":"cookbook/detect_darkmode/","title":"How to detect dark mode","text":"<p>Inside your Composable you can use isSystemInDarkTheme to detect if the device is running in dark mode.</p> <pre><code>    val dark = isSystemInDarkTheme()\n</code></pre>"},{"location":"cookbook/detect_darkmode/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Learn-Jetpack-Compose-By-Example/DarkModeActivity</li> </ul>"},{"location":"cookbook/get_android_context/","title":"How to get Android Context","text":"<p>You can use LocalContext.current to receive the context of your Android App inside a Compose Function</p> <pre><code>@Composable\nfun AndroidContextComposeDemo() {\nval context = LocalContext.current\nText(text = \"Read this string from Context: \"+context.getString(R.string.app_name))\n}\n</code></pre>"},{"location":"cookbook/get_android_context/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"cookbook/hint_edit_text/","title":"How to show hint with underline in a TextField","text":"<p>Info</p> <p>This is the API of version dev08. Newer versions may have a different one</p> <p>We have all used EditText in classic Android development. It has lots of features like hint showing or default underline background. In Jetpack compose it\u2019s name is TextField and we set up it like that.</p>"},{"location":"cookbook/hint_edit_text/#create-textfield","title":"Create TextField","text":"<pre><code>val state = state { \"\" }\nTextField(\nvalue = state.value,\nmodifier = modifier,\nonValueChange = { state.value = it },\ntextStyle = yourTextStyle\n)\n</code></pre> <p>With textStyle parameter you can change your TextField\u2019s font, font size, color and many other things, but there are something that its missing, you cant quite set its PlaceHolder text(Hint). So how can we do that? If you think about that hint\u2019s only purpose is to be shown when TextField is empty and be hidden when we are starting to type something in TextField. So we need two views one Text for hint showing and one TextField. They must have same location on the screen so it will look like same component. So without further ado let\u2019s start implementing it.</p>"},{"location":"cookbook/hint_edit_text/#create-hinttextfield","title":"Create HintTextField","text":"<pre><code>@Composable\nfun HintEditText(\nhintText: String = \"\",\nmodifier: Modifier = Modifier.None,\ntextStyle: TextStyle = currentTextStyle()\n) {\nval state = state { \"\" }\nval inputField = @Composable {\nTextField(\nvalue = state.value,\nmodifier = modifier,\nonValueChange = { state.value = it },\ntextStyle = textStyle.merge(TextStyle(textDecoration = TextDecoration.None))\n)\n}\n\nLayout(\nchildren = @Composable {\ninputField()\nText(\ntext = hintText,\nmodifier = modifier,\nstyle = textStyle.merge(TextStyle(color = Color.Gray))\n)\nDivider(color = Color.Black, height = 2.dp)\n},\nmeasureBlock = { measurables: List&lt;Measurable&gt;, constraints: Constraints, _ -&gt;\nval inputFieldPlace = measurables[0].measure(constraints)\nval hintEditPlace = measurables[1].measure(constraints)\nval dividerEditPlace = measurables[2].measure(\nConstraints(constraints.minWidth, constraints.maxWidth, 2.ipx, 2.ipx)\n)\nlayout(\ninputFieldPlace.width,\ninputFieldPlace.height + dividerEditPlace.height\n) {\ninputFieldPlace.place(0.ipx, 0.ipx)\nif (state.value.isEmpty())\nhintEditPlace.place(0.ipx, 0.ipx)\ndividerEditPlace.place(0.ipx, inputFieldPlace.height)\n}\n})\n}\n</code></pre> <p>Seems like lots of code for simple functional, doesn\u2019t it? Let\u2019s describe whats happening from the function declaration. It has three function parameters and they are pretty self-explanatory. As second part we are creating TextField lambda and passing it in Layout Composable function, with our HintText and Divider, which as you might have guessed will create underline background. Now it\u2019s time to decide where we are going to put our HintTextField. </p> <p>First of all we need to measure our views and measureBlock will help us do that.  Measurables list will contain three items(Our TextField, HintText and Divider) as Measurable type, we need to call measure on all of list items and pass constraints in it. Constraints is a class which only has four properties(minWidth, maxWidth, minHeight, maxHeight). We can pass constraints which is given to us by measuring @Composable children lambda, which works with our TextField and HintText because we want them to have same size as it\u2019s parent, but when it comes to underline background we need it to stay as thin as possible.  Now we are measuring our HintTextField one more time and placing it\u2019s children on some (x, y).</p> <p>One last thing to realize is that if our state value is not empty we don\u2019t place our HintText at all!</p>"},{"location":"cookbook/how_to_create_custom_shape/","title":"How to create a custom shape","text":""},{"location":"cookbook/how_to_create_custom_shape/#how-to-draw-a-custom-shape","title":"How to draw a custom shape?","text":"<p>Info</p> <p>This is the API of version 1.2.0. Newer versions may have a different one</p> <p> </p>"},{"location":"cookbook/how_to_create_custom_shape/#genericshape","title":"GenericShape","text":"<p>You can create custom shapes. One way to do it, is to use GenericShape.  Let\u2019s see how the triangle is drawn.</p> <pre><code>private val TriangleShape = GenericShape { size, _ -&gt;\n// 1)\nmoveTo(size.width / 2f, 0f)\n\n// 2)\nlineTo(size.width, size.height)\n\n// 3)\nlineTo(0f, size.height)\n}\n</code></pre> <p>Inside the GenericShape you can draw your custom shape. You have access to the size-object. This is size of the Composable that the shape is applied to. You can get the height with size.height and the width with size.width</p> <p>1) Initially the painter will start at the top left of the parent composable(0x,0y). With moveTo() you can set the coordinates of the painter. Here the coordinates will be set to the half width of the parent layout and a 0y coordinate.</p> <p>2) This will draw a line from the painter coordinates, which were set in 1), to the bottom right corner of the parent layout. The painter coordinates are then automatically set to this corner.</p> <p>3) This will draw a line to the bottom left corner. GenericShape will implicitly execute the close()-function. close() will draw a line from the last painter coordinates to the first definied.</p>"},{"location":"cookbook/how_to_create_custom_shape/#extend-the-shape-interface","title":"Extend the Shape interface","text":"<p><pre><code>/**\n * Defines a generic shape.\n */\ninterface Shape {\n/**\n     /**\n     * Creates [Outline] of this shape for the given [size].\n     *\n     * @param size the size of the shape boundary.\n     * @param density the current density of the screen.\n     *\n     * @return [Outline] of this shape for the given [size].\n     */\nfun createOutline(size: Size, density: Density): Outline\n}\n</code></pre> You can extend the Shape interface to create your own implementation of Shape. Inside createOutline you get the size of the Composable, which the shape is applied to and the density of the screen. You have to return an instance of Outline. Outline is a sealed class with the following subclasses:</p> <ul> <li>Rectangle(val rect: Rect)</li> <li>Rounded(val rrect: RRect)</li> <li>Generic(val path: Path)</li> </ul> <p>Take a look at the GenericShape example when you want to understand, how the drawing of a custom shape works.</p> <pre><code>class CustomShape : Shape {\noverride fun createOutline(size: Size, density: Density): Outline {\nval path = Path().apply {\nmoveTo(size.width / 2f, 0f)\nlineTo(size.width, size.height)\nlineTo(0f, size.height)\nclose()\n}\nreturn Outline.Generic(path)\n}\n}\n</code></pre>"},{"location":"cookbook/how_to_make_composable_invisible/","title":"How to make a Composable invisible?","text":"<p>When you want to set a Composable to invisible, you can use the alpha modifier. alpha(0f) will make it invisible.</p>"},{"location":"cookbook/how_to_use_an_android_view_in_compose/","title":"How to use an Android View in Compose","text":"<p>See AndroidView</p>"},{"location":"cookbook/how_to_use_compose_in_viewgroup/","title":"How to use Compose in a ViewGroup","text":"<p>See ComposeView</p>"},{"location":"cookbook/loadimage/","title":"How to load an Image","text":""},{"location":"cookbook/loadimage/#how-to-load-an-image","title":"How to load an image","text":""},{"location":"cookbook/loadimage/#load-image","title":"Load Image","text":"<p>You can use painterResource to load an image from the resources</p> <p><pre><code>@Composable\nfun ImageResourceDemo() {\nval image: Painter = painterResource(id = R.drawable.composelogo)\nImage(painter = image,contentDescription = \"\")\n}\n</code></pre> Or load an Icon from Material Icons</p> <pre><code>@Composable\nfun ImageResourceDemo() {\nIcon(Icons.Rounded.Home,contentDescription = \"\")\n}\n</code></pre> <p>Remember to add dependencies to build.gradle</p> <pre><code>    implementation \"androidx.compose.material:material-icons-extended:$compose_version\"\n</code></pre>"},{"location":"cookbook/loadimage/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"cookbook/overview/","title":"Cookbook","text":"<ul> <li>Handle changes to a text field</li> <li>How to use Compose in a ViewGroup</li> <li>How to create HintTextField</li> <li>How to load an Image</li> <li>How to use an Android View in Compose</li> <li>How to get Android Context</li> <li>How to detect dark mode</li> <li>How to make a Composable invisible?</li> </ul>"},{"location":"cookbook/textfield_changes/","title":"Handle changes to a text field","text":""},{"location":"cookbook/textfield_changes/#handle-changes-to-a-textfield","title":"Handle changes to a TextField","text":"<p>In some cases, it\u2019s useful to get the value of a textfield every time the text in a text field changes. For example, you might want to build a search screen with autocomplete functionality where you want to update the results as the user types.</p> <p>Here is an example how you can do it with Compose:</p> <p> </p> <pre><code>@Composable\nfun TextFieldDemo() {\nColumn(Modifier.padding(16.dp)) {\nval textState = remember { mutableStateOf(TextFieldValue()) }\nTextField(\nvalue = textState.value,\nonValueChange = { textState.value = it }\n)\nText(\"The textfield has this text: \" + textState.value.text)\n}\n}\n</code></pre> <p>The simplest approach is to supply an onValueChange() callback to a TextField. Whenever the text changes, the callback is invoked.</p> <p>In this example, every time the TextField changes, the new text value will be saved in a state and set to the TextField and the Text.</p>"},{"location":"cookbook/textfield_changes/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"desktop/overview/","title":"Compose on Desktop","text":"<p>JetBrains released a Compose port for the desktop.</p> <p>\u201cCompose for Desktop targets the JVM, and supports high-performance, hardware-accelerated UI rendering on all major desktop platforms (macOS, Windows, and Linux/x64) by leveraging the powerful native Skia graphics library.\u201d</p> <p>You can find more information here https://www.jetbrains.com/lp/compose/ or on their Github Repo https://github.com/JetBrains/compose-multiplatform or in the Kotlin Slack  #compose-desktop</p>"},{"location":"desktop/general/Image/","title":"Image","text":"<p>WIP</p> <p>You can find the official docs here: https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Image_And_Icons_Manipulations</p>"},{"location":"desktop/general/gettingstarted/","title":"Getting Started","text":"<p>WIP</p> <p>You can find the official docs here: https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Getting_Started</p>"},{"location":"desktop/general/keyboard/","title":"Keyboard","text":"<p>WIP</p> <p>You can find the official docs here: https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Keyboard</p>"},{"location":"desktop/general/mouse/","title":"Mouse","text":"<p>WIP</p> <p>You can find the official docs here: https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Mouse_Events</p>"},{"location":"desktop/general/scrollbar/","title":"Scrollbar","text":"<p>WIP</p> <p>You can find the official docs here: https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Desktop_Components#scrollbars</p>"},{"location":"desktop/general/window/","title":"Window","text":"<p>WIP</p> <p>You can find the official docs here: https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Window_API_new</p>"},{"location":"foundation/basictextfield/","title":"BasicTextField","text":""},{"location":"foundation/basictextfield/#basictextfield","title":"BasicTextField","text":"<p>BasicTextField can be used to insert text. See TextField for a material version.</p> <p> </p> <pre><code>@Composable\nfun BasicTextFieldDemo() {\nvar textState by remember { mutableStateOf(TextFieldValue(\"Hello World\")) }\nColumn {\nBasicTextField(value = textState, onValueChange = {\ntextState = it\n})\nText(\"The textfield has this text: \" + textState.text)\n}\n}\n</code></pre>"},{"location":"foundation/basictextfield/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"foundation/canvas/","title":"Canvas","text":""},{"location":"foundation/canvas/#canvas","title":"Canvas","text":"<p>A Canvas is a Composable that allows you to draw inside of it.</p>"},{"location":"foundation/canvas/#how-to-draw-on-canvas","title":"How to draw on Canvas","text":"<pre><code>@Preview(showBackground = true)\n@Composable\nfun CanvasDrawExample() {\nCanvas(modifier = Modifier.fillMaxSize()) {\ndrawRect(Color.Blue, topLeft = Offset(0f, 0f), size = Size(this.size.width, 55f))\ndrawCircle(Color.Red, center = Offset(50f, 200f), radius = 40f)\ndrawLine(\nColor.Green, Offset(20f, 0f),\nOffset(200f, 200f), strokeWidth = 5f\n)\n\ndrawArc(\nColor.Black,\n0f,\n60f,\nuseCenter = true,\nsize = Size(300f, 300f),\ntopLeft = Offset(60f, 60f)\n)\n}\n}\n</code></pre>"},{"location":"foundation/canvas/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"foundation/image/","title":"Image","text":""},{"location":"foundation/image/#image","title":"Image","text":"<p>Image is used to display Images. It\u2019s similar to an ImageView in the classic Android View system.</p> <p> </p>"},{"location":"foundation/image/#load-image","title":"Load Image","text":"<p>You can use painterResource to load an image from the resources</p> <pre><code>@Composable\nfun ImageResourceDemo() {\nval image: Painter = painterResource(id = R.drawable.composelogo)\nImage(painter = image,contentDescription = \"\")\n}\n</code></pre>"},{"location":"foundation/image/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"foundation/lazycolumn/","title":"LazyColumn","text":""},{"location":"foundation/lazycolumn/#lazycolumn","title":"LazyColumn","text":"<p>A LazyColumn is a vertically scrolling list that only composes and lays out the currently visible items. It\u2019s similar to a Recyclerview in the classic Android View system.</p> <p> </p> <pre><code>@Composable\nfun LazyColumnDemo() {\nval list = listOf(\n\"A\", \"B\", \"C\", \"D\"\n) + ((0..100).map { it.toString() })\nLazyColumn(modifier = Modifier.fillMaxHeight()) {\nitems(items = list, itemContent = { item -&gt;\nLog.d(\"COMPOSE\", \"This get rendered $item\")\nwhen (item) {\n\"A\" -&gt; {\nText(text = item, style = TextStyle(fontSize = 80.sp))\n}\n\"B\" -&gt; {\nButton(onClick = {}) {\nText(text = item, style = TextStyle(fontSize = 80.sp))\n}\n}\n\"C\" -&gt; {\n//Do Nothing\n}\n\"D\" -&gt; {\nText(text = item)\n}\nelse -&gt; {\nText(text = item, style = TextStyle(fontSize = 80.sp))\n}\n}\n})\n}\n}\n</code></pre>"},{"location":"foundation/lazycolumn/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"foundation/lazyrow/","title":"LazyRow","text":""},{"location":"foundation/lazyrow/#lazyrow","title":"LazyRow","text":"<p>A LazyRow is a horizontal scrolling list that only composes and lays out the currently visible items. It\u2019s similar to a horizontal Recyclerview in the classic Android View system.</p> <p> </p> <pre><code>@Composable\nfun LazyRowDemo() {\nval list = listOf(\n\"A\", \"B\", \"C\", \"D\"\n) + ((0..100).map { it.toString() })\nLazyRow(modifier = Modifier.fillMaxHeight()) {\nitems(items = list, itemContent = { item -&gt;\nLog.d(\"COMPOSE\", \"This get rendered $item\")\nwhen (item) {\n\"A\" -&gt; {\nText(text = item, style = TextStyle(fontSize = 80.sp))\n}\n\"B\" -&gt; {\nButton(onClick = {}) {\nText(text = item, style = TextStyle(fontSize = 80.sp))\n}\n}\n\"C\" -&gt; {\n//Do Nothing\n}\n\"D\" -&gt; {\nText(text = item)\n}\nelse -&gt; {\nText(text = item, style = TextStyle(fontSize = 80.sp))\n}\n}\n})\n}\n}\n</code></pre>"},{"location":"foundation/lazyrow/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul> <p>Lazy and amazy \u2013 Lazy layouts in Compose</p>"},{"location":"foundation/lazyverticalgrid/","title":"LazyVerticalGrid","text":""},{"location":"foundation/lazyverticalgrid/#lazyverticalgrid","title":"LazyVerticalGrid","text":"<p>Jetpack Compose provides an API for displaying grid or grid elements.</p>"},{"location":"foundation/lazyverticalgrid/#example","title":"Example","text":"<p>To arrange list items in a grid, <code>LazyVerticalGrid</code> provides a cells parameter that controls how cells are formed into columns. The following example displays the items in a grid, using <code>GridCells.Adaptive</code> to set the width of each column at least 128.dp:</p> <p> </p> <pre><code>@Composable\nfun LazyVerticalGridDemo(){\nval list = (1..10).map { it.toString() }\n\nLazyVerticalGrid(\ncolumns = GridCells.Adaptive(128.dp),\n\n// content padding\ncontentPadding = PaddingValues(\nstart = 12.dp,\ntop = 16.dp,\nend = 12.dp,\nbottom = 16.dp\n),\ncontent = {\nitems(list.size) { index -&gt;\nCard(\nbackgroundColor = Color.Red,\nmodifier = Modifier\n.padding(4.dp)\n.fillMaxWidth(),\nelevation = 8.dp,\n) {\nText(\ntext = list[index],\nfontWeight = FontWeight.Bold,\nfontSize = 30.sp,\ncolor = Color(0xFFFFFFFF),\ntextAlign = TextAlign.Center,\nmodifier = Modifier.padding(16.dp)\n)\n}\n}\n}\n)\n}\n</code></pre> <p>Apart from <code>GridCells.Adaptive</code> there are other types of cells that provide the number of columns per row. As follows <pre><code>colums = GridCells.Fixed(2)\n</code></pre> The above code will display 2 columns in 1 row.</p>"},{"location":"foundation/lazyverticalgrid/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"foundation/shape/","title":"Shape","text":""},{"location":"foundation/shape/#shape","title":"Shape","text":"<p>A Shape can be used to draw a Composable in specific shape.</p>"},{"location":"foundation/shape/#rectangleshape","title":"RectangleShape","text":"<p>A shape describing the rectangle.</p> <pre><code>@Composable\nfun RectangleShapeDemo(){\nExampleBox(shape = RectangleShape)\n}\n\n@Composable\nfun ExampleBox(shape: Shape){\nColumn(modifier = Modifier.fillMaxWidth().wrapContentSize(Alignment.Center)) {\nBox(\nmodifier = Modifier.size(100.dp).clip(shape).background(Color.Red)\n)\n}\n}\n</code></pre>"},{"location":"foundation/shape/#circleshape","title":"CircleShape","text":"<p>Circular Shape with all the corners sized as the 50 percent of the shape size.</p> <pre><code>@Composable\nfun CircleShapeDemo(){\nExampleBox(shape = CircleShape)\n}\n\n@Composable\nfun ExampleBox(shape: Shape){\nColumn(modifier = Modifier.fillMaxWidth().wrapContentSize(Alignment.Center)) {\nBox(\nmodifier = Modifier.size(100.dp).clip(shape).background(Color.Red)\n)\n}\n}\n</code></pre>"},{"location":"foundation/shape/#roundedcornershape","title":"RoundedCornerShape","text":"<p>A shape describing the rectangle with rounded corners.</p> <pre><code>@Composable\nfun RoundedCornerShapeDemo(){\nExampleBox(shape = RoundedCornerShape(10.dp))\n}\n\n@Composable\nfun ExampleBox(shape: Shape){\nColumn(modifier = Modifier.fillMaxWidth().wrapContentSize(Alignment.Center)) {\nBox(\nmodifier = Modifier.size(100.dp).clip(shape).background(Color.Red)\n)\n}\n}\n</code></pre>"},{"location":"foundation/shape/#cutcornershape","title":"CutCornerShape","text":"<p>A shape describing the rectangle with cut corners.</p> <pre><code>@Composable\nfun CutCornerShapeDemo(){\nExampleBox(shape = CutCornerShape(10.dp))\n}\n\n@Composable\nfun ExampleBox(shape: Shape){\nColumn(modifier = Modifier.fillMaxWidth().wrapContentSize(Alignment.Center)) {\nBox(\nmodifier = Modifier.size(100.dp).clip(shape).background(Color.Red)\n)\n}\n}\n</code></pre>"},{"location":"foundation/shape/#how-to-draw-a-custom-shape","title":"How to draw a custom shape?","text":"<p>How to create a custom shape</p>"},{"location":"foundation/text/","title":"Text","text":""},{"location":"foundation/text/#text","title":"Text","text":"<p>You can use Text to display text. You can use the style argument to define things like textdecoration or fontfamily.</p> <p> </p> <pre><code>@Composable\nfun TextExample(){\nColumn {\nText(\"Just Text\")\nText(\"Text with cursive font\", style = TextStyle(fontFamily = FontFamily.Cursive))\nText(\ntext = \"Text with LineThrough\",\nstyle = TextStyle(textDecoration = TextDecoration.LineThrough)\n)\nText(\ntext = \"Text with underline\",\nstyle = TextStyle(textDecoration = TextDecoration.Underline)\n)\nText(\ntext = \"Text with underline, linethrough and bold\",\nstyle = TextStyle(\ntextDecoration = TextDecoration.combine(\nlistOf(\nTextDecoration.Underline,\nTextDecoration.LineThrough\n)\n), fontWeight = FontWeight.Bold\n)\n)\n}\n}\n</code></pre>"},{"location":"foundation/text/#working-with-text","title":"Working with Text","text":""},{"location":"foundation/text/#normal-text","title":"Normal text","text":"<pre><code>@Composable\nfun NormalTextExample(){\nText(\"Just Text\")\n}\n</code></pre>"},{"location":"foundation/text/#cursive-text","title":"Cursive text","text":"<pre><code>@Composable\nfun CursiveTextExample(){\nText(\"Text with cursive font\", style = TextStyle(fontFamily = Cursive))\n}\n</code></pre>"},{"location":"foundation/text/#text-with-linethrough","title":"Text with LineThrough","text":"<pre><code>@Composable\nfun TextWithLineThroughExample(){\nText(\ntext = \"Text with LineThrough\",\nstyle = TextStyle(textDecoration = TextDecoration.LineThrough)\n)\n}\n</code></pre>"},{"location":"foundation/text/#text-with-underline","title":"Text with underline","text":"<pre><code>@Composable\nfun TextWithUnderline(){\nText(\ntext = \"Text with underline\",\nstyle = TextStyle(textDecoration = TextDecoration.Underline)\n)\n}\n</code></pre>"},{"location":"foundation/text/#text-with-underline-bold-and-linethrough","title":"Text with underline, bold and linethrough","text":"<pre><code>@Composable\nfun TextWithUnderlineStrikeThroughAndBold(){\nText(\ntext = \"Text with underline, linethrough and bold\",\nstyle = TextStyle(\ntextDecoration = TextDecoration.combine(\nlistOf(\nTextDecoration.Underline,\nTextDecoration.LineThrough\n)\n), fontWeight = FontWeight.Bold\n)\n)\n}\n</code></pre>"},{"location":"foundation/text/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> <li>Write it down: Using text in Jetpack Compose)</li> </ul>"},{"location":"foundation/layout/boxwithconstraints/","title":"BoxWithConstraints","text":""},{"location":"foundation/layout/boxwithconstraints/#boxwithconstraints","title":"BoxWithConstraints","text":"<p>BoxWithConstraints is a layout similar to the Box layout, but it has the advantage that you can get the minimum/maximum available width and height for the Composable on the screen. You can use it to show a different content depending on the available space.</p> <p>Inside the scope of BoxWithConstraints you have access to the BoxWithConstraintsScope. With it you can get the minWidth, maxWidth, minHeight, maxHeight in dp and constraints in pixels.</p>"},{"location":"foundation/layout/boxwithconstraints/#example","title":"Example:","text":"<pre><code>@Composable\nfun BoxWithConstraintsDemo() {\nColumn {\nColumn {\nMyBoxWithConstraintsDemo()\n}\n\nText(\"Here we set the size to 150.dp\", modifier = Modifier.padding(top = 20.dp))\nColumn(modifier = Modifier.size(150.dp)) {\nMyBoxWithConstraintsDemo()\n}\n}\n}\n\n@Composable\nprivate fun MyBoxWithConstraintsDemo() {\nBoxWithConstraints {\nval boxWithConstraintsScope = this\n//You can use this scope to get the minWidth, maxWidth, minHeight, maxHeight in dp and constraints\n\nColumn {\nif (boxWithConstraintsScope.maxHeight &gt;= 200.dp) {\nText(\n\"This is only visible when the maxHeight is &gt;= 200.dp\",\nstyle = TextStyle(fontSize = 20.sp)\n)\n}\nText(\"minHeight: ${boxWithConstraintsScope.minHeight}, maxHeight: ${boxWithConstraintsScope.maxHeight},  minWidth: ${boxWithConstraintsScope.minWidth} maxWidth: ${boxWithConstraintsScope.maxWidth}\")\n}\n}\n}\n</code></pre>"},{"location":"foundation/layout/boxwithconstraints/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"foundation/layout/spacer/","title":"Spacer","text":""},{"location":"foundation/layout/spacer/#spacer","title":"Spacer","text":"<p>Spacer is a Composable that can be used when you want to add an additional space between Composables</p> <p> </p>"},{"location":"foundation/layout/spacer/#example","title":"Example","text":"<pre><code>@Composable\nfun SpacerDemo() {\nColumn {\nText(\"Hello\")\nSpacer(modifier = Modifier.size(30.dp))\nText(\"World\")\n}\n}\n</code></pre>"},{"location":"foundation/layout/spacer/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"general/codelabs/","title":"Codelabs","text":"<ul> <li>Jetpack Compose basics</li> <li>Migrating to Jetpack Compose</li> <li>Jetpack Compose Theming</li> <li>Layouts in Jetpack Compose</li> <li>Using State in Jetpack Compose</li> <li>Advanced State Side Effects</li> </ul>"},{"location":"general/compiler_plugin/","title":"Compiler Plugin","text":"<p>Compose works by transforming all Kotlin functions that are annotated with @Composable and adding code for the Compose Runtime. To do that it uses a Kotlin Compiler Plugin.</p> <p>For instance, this Composable:  <pre><code>@Composable\nfun Hello(name: String) {\nText(name)\n}\n</code></pre></p> <p>will be transformed and compiled to Jvm ByteCode. Below you can see the decompiled code as Java code</p> <pre><code>@Metadata(\nmv = {1, 5, 1},\nk = 2,\nxi = 48,\nd1 = {\"\\u0000\\u0010\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\u0002\\u001a\\u0015\\u0010\\u0000\\u001a\\u00020\\u00012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003H\\u0007\u00a2\\u0006\\u0002\\u0010\\u0004\u00a8\\u0006\\u0005\"},\nd2 = {\"Hello\", \"\", \"name\", \"\", \"(Ljava/lang/String;Landroidx/compose/runtime/Composer;I)V\", \"app_debug\"}\n)\npublic final class GreetingKt {\n@Composable\npublic static final void Hello(@NotNull final String name, @Nullable Composer $composer, final int $changed) {\nIntrinsics.checkNotNullParameter(name, \"name\");\n$composer = $composer.startRestartGroup(274849561);\nComposerKt.sourceInformation($composer, \"C(Hello)7@166L10:Greeting.kt#tlkiwl\");\nint $dirty = $changed;\nif (($changed &amp; 14) == 0) {\n$dirty = $changed | ($composer.changed(name) ? 4 : 2);\n}\n\nif (($dirty &amp; 11 ^ 2) == 0 &amp;&amp; $composer.getSkipping()) {\n$composer.skipToGroupEnd();\n} else {\nTextKt.Text-fLXpl1I(name, (Modifier)null, 0L, 0L, (FontStyle)null, (FontWeight)null, (FontFamily)null, 0L, (TextDecoration)null, (TextAlign)null, 0L, 0, false, 0, (Function1)null, (TextStyle)null, $composer, 14 &amp; $dirty, 0, 65534);\n}\n\nScopeUpdateScope var4 = $composer.endRestartGroup();\nif (var4 != null) {\nvar4.updateScope((Function2)(new Function2() {\npublic final void invoke(@Nullable Composer $composer, int $force) {\nGreetingKt.Hello(name, $composer, $changed | 1);\n}\n}));\n}\n\n}\n}\n</code></pre>"},{"location":"general/compiler_plugin/#where-can-i-find-the-source-code","title":"Where can i find the source code","text":"<p>https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/compiler/compiler-hosted/</p>"},{"location":"general/compiler_plugin/#see-also","title":"See also:","text":"<ul> <li>Leland Richardson(@intelligibabble) started a series about the Compose Compiler https://www.youtube.com/watch?v=bg0R9-AUXQM</li> <li>Under the hood of Jetpack Compose \u2014 part 2 of 2</li> <li>A Hitchhiker\u2019s Guide to Compose Compiler: Composers, Compiler Plugins, and Snapshots</li> <li>Explained: Compose Compiler and Runtime</li> <li>Using Compose Runtime to create a client library</li> </ul>"},{"location":"general/compose_lifecycle/","title":"Compose Lifecycle","text":""},{"location":"general/compose_lifecycle/#lifecycle","title":"Lifecycle","text":"<p>Compose has some \u201ceffects\u201d-functions that can be used in Composables to track the lifecycle of a function.</p> <ul> <li> <p>LaunchedEffect {} will be called the first time a compose function is applied.</p> </li> <li> <p>DisposableEffect { } Has a onDispose() which will be called when the compose function isn\u2019t part of the composition anymore.</p> </li> </ul> <p>The example below has a Button that will count up everytime it gets clicked. When the count value gets 3, the Text() function will not be added anymore.</p> <p>The first time the LifecycleDemo will be executed, the SideEffect in the if-clause will be executed. When the count value gets 3 +onDispose{} inside the if-clause will be called. </p> <pre><code>@Composable\nfun LifecycleDemo() {\nval count = remember { mutableStateOf(0) }\n\nColumn {\nButton(onClick = {\ncount.value++\n}) {\nText(\"Click me\")\n}\n\nif (count.value &lt; 3) {\nLaunchedEffect(Unit)\nLog.d(\"Compose\", \"onactive with value: \" + count.value)\n}\nDisposableEffect(Unit) {\nonDispose {\nLog.d(\"Compose\", \"onDispose because value=\" + count.value)\n}\n}\n\nText(text = \"You have clicked the button: \" + count.value.toString())\n}\n}\n}\n</code></pre>"},{"location":"general/compose_lifecycle/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"general/composeconfusion/","title":"Compose Confusion","text":"<p>Because of similar naming of the Compose libraries, there is a some confusion between the different \u201cvariants\u201d of Compose. Here is a quick overview that tries to give clarification:</p>"},{"location":"general/composeconfusion/#compose-runtime","title":"Compose Runtime","text":"<p>The Compose Runtime is a library for manipulating and managing trees of data. This library can be used to manage UI tree nodes, but it\u2019s a general purpose library, so it can be used with any kind of data.</p> <p>It is developed as a Kotlin Multiplatform Library, which means that it could be ported to every target that Kotlin Multiplatform supports.  Openly developed targets are Android, JVM and Web. Square is running an internal version of it on iOS. </p> <p>This library contains basic things like  @Composable, remember, mutableState, effects.</p>"},{"location":"general/composeconfusion/#compose-compiler-plugin","title":"Compose Compiler Plugin","text":"<p>The Compose Compiler Plugin is a Kotlin Compiler Plugin that transforms all the @Composable functions and adds the needed calls to the Compose Runtime</p>"},{"location":"general/composeconfusion/#compose-ui","title":"Compose UI","text":"<p>Compose UI is a set of UI libraries for Android using Compose Runtime/Compose Compiler Plugin</p>"},{"location":"general/composeconfusion/#jetpack-compose","title":"Jetpack Compose","text":"<p>Jetpack Compose is a UI Toolkit for Android developed by Google. It is using Compose Runtime/Compose Compiler Plugin and Compose UI</p>"},{"location":"general/composeconfusion/#compose-for-web","title":"Compose for Web","text":"<p>Compose for Web is a UI Toolkit for Web developed by JetBrains written in Kotlin/JS. It is using the Compose Runtime and the Compose Compiler Plugin. It does not use Compose UI, because it uses Compose Wrappers for the HTML DOM UI Elements.</p>"},{"location":"general/composeconfusion/#compose-for-desktop","title":"Compose for Desktop","text":"<p>Compose for Desktop is a UI Toolkit developed by JetBrains. It runs on the JVM and it is using  Compose Runtime, Compose Compiler Plugin and a Compose UI version for desktop which is using Skia to target Windows, macOS, Linux. Additional it provides components for desktop specific apps like scrollbars or mouse support and Swing interop.</p>"},{"location":"general/composeconfusion/#compose-multiplatform","title":"Compose Multiplatform","text":"<p>Compose Multiplatform is a Kotlin multiplatform project which is developed by JetBrains. It uses Jetpack Compose, Compose for Web and Compose for Desktop</p>"},{"location":"general/compositionlocal/","title":"CompositionLocal","text":""},{"location":"general/compositionlocal/#compositionlocal","title":"CompositionLocal","text":"<p>CompositionLocal is useful when you want to create a dependency in a higher node of the layout tree and use it on lower node without having to pass it down the tree through every child Composable.</p>"},{"location":"general/compositionlocal/#how-to-create-an-compositionlocal","title":"How to create an CompositionLocal?","text":"<p><pre><code>data class User(val name: String, val age: Int)\nval LocalActiveUser = compositionLocalOf&lt;User&gt; { error(\"No user found!\") }\n</code></pre> Let\u2019s say you want to create an CompositionLocal with an User. You can use compositionLocalOf. Inside the function you can return an initial user object  or you can throw an exception when the user is missing.</p>"},{"location":"general/compositionlocal/#how-to-provide-a-value-for-an-compositionlocal","title":"How to provide a value for an CompositionLocal?","text":"<p><pre><code>@Composable\nprivate fun MyUserScreen() {\nval user = User(\"Jens\", 31)\nCompositionLocalProvider(LocalActiveUser provides user) {\nUserInfo()\n}\n}\n</code></pre> Somewhere above in your hierarchy you have to use CompositionLocalProvider to provide a value for your CompositionLocal. The syntax is: \u201cCompositionLocal<code>&lt;T&gt;</code> provides T\u201d. All child @Composable of CompositionLocalProvider will implicitly be able to get the value of the CompositionLocals.</p>"},{"location":"general/compositionlocal/#how-to-use-a-value-of-an-compositionlocal","title":"How to use a value of an CompositionLocal?","text":"<pre><code>@Preview\n@Composable\nfun UserInfo() {\nColumn {\nText(\"Name: \" + LocalActiveUser.current.name)\nText(\"Age: \" + LocalActiveUser.current.age)\n}\n}\n</code></pre> <p>Now you can use your CompositionLocal in your @Composable. Every CompositionLocal has a current property that contains the current value.</p>"},{"location":"general/compositionlocal/#predefined-compositionlocals","title":"Predefined CompositionLocals","text":"<p>The Compose libraries already contain some useful CompositionLocals. You can directly use them without needing add a Providers.</p>"},{"location":"general/compositionlocal/#localcontext","title":"LocalContext","text":"<p>Provides a [Context] that can be used by Android applications.</p>"},{"location":"general/compositionlocal/#localconfiguration","title":"LocalConfiguration","text":"<p>The [Configuration] is useful for determining how to organize the UI.</p>"},{"location":"general/compositionlocal/#device-orientation","title":"Device orientation","text":"<p>One of the things you can get from the LocalConfiguration is the orientation of your device. This can be used to give the user a different ui when the device is rotated.</p> <pre><code>val configuration = LocalConfiguration.current\nwhen (configuration.orientation) {\nConfiguration.ORIENTATION_LANDSCAPE -&gt; {\nText(\"Landscape\")\n}\nelse -&gt; {\nText(\"Portrait\")\n}\n}\n</code></pre>"},{"location":"general/compositionlocal/#locallifecycleowner","title":"LocalLifecycleOwner","text":"<p>The CompositionLocal containing the current [LifecycleOwner].</p>"},{"location":"general/compositionlocal/#localview","title":"LocalView","text":"<p>The CompositionLocal containing the current Compose [View].</p>"},{"location":"general/compositionlocal/#localviewmodelstoreowner","title":"LocalViewModelStoreOwner","text":"<p>The CompositionLocal containing the current [ViewModelStoreOwner].</p>"},{"location":"general/compositionlocal/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"general/compositionlocalprovider/","title":"CompositionLocalProvider","text":"<p>CompositionLocalProvider are used to provide a value for an CompositionLocal</p>"},{"location":"general/compositionlocalprovider/#how-to-provide-a-value-for-an-compositionlocal","title":"How to provide a value for an CompositionLocal?","text":"<p><pre><code>@Composable\nprivate fun MyUserScreen() {\nval user = User(\"Jens\", 31)\nCompositionLocalProvider(LocalActiveUser provides user) {\nUserInfo()\n}\n}\n</code></pre> Somewhere above in your hierarchy you have to use CompositionLocalProviders to provide a value for your CompositionLocal. You can provide the values of multiple CompositionLocals inside Providers. The syntax is: \u201cCompositionLocal<code>&lt;T&gt;</code> provides T\u201d. All child @Composable of CompositionLocalProvider will implicitly be able to get the value of the CompositionLocals.</p>"},{"location":"general/getting_started/","title":"Project Setup","text":""},{"location":"general/getting_started/#gradle-dependencies","title":"Gradle Dependencies","text":"<p>Add this inside in the android{} block your build.gradle <pre><code>android{\n//YOUR OTHER CODE\n\nbuildFeatures {\ncompose = true\n}\ncomposeOptions {\nkotlinCompilerExtensionVersion = \"1.4.0\"\n}\n\n}\n</code></pre></p> <p>Below are some Compose dependencies that are online available, can find the others here</p> <pre><code>dependencies {\nval compose_version = \"1.4.0\"\n\nimplementation(\"androidx.compose.animation:animation-core:$compose_version\")\nimplementation(\"androidx.compose.animation:animation:$compose_version\")\nimplementation(\"androidx.compose.ui:ui:$compose_version\")\nimplementation(\"androidx.compose.foundation:foundation:$compose_version\")\nimplementation(\"androidx.compose.ui:ui-geometry:$compose_version\")\nimplementation(\"androidx.compose.ui:ui-graphics:$compose_version\")\nimplementation(\"androidx.compose.foundation:foundation-layout:$compose_version\")\nimplementation(\"androidx.compose.runtime:runtime-livedata:$compose_version\")\nimplementation(\"androidx.compose.material:material:$compose_version\")\nimplementation(\"androidx.compose.material:material-icons-core:$compose_version\")\nimplementation(\"androidx.compose.material:material-icons-extended:$compose_version\")\nimplementation(\"androidx.compose.runtime:runtime-rxjava2:$compose_version\")\nimplementation(\"androidx.compose.ui:ui-text:$compose_version\")\nimplementation(\"androidx.compose.ui:ui-util:$compose_version\")\nimplementation(\"androidx.compose.ui:ui-viewbinding:$compose_version\")\nimplementation(\"androidx.compose.ui:ui-tooling:$compose_version\")\nimplementation(\"androidx.activity:activity-compose:1.3.1\")\n\n//Compose Constraintlayout\nimplementation(\"androidx.constraintlayout:constraintlayout-compose:1.0.0\")\n}\n</code></pre>"},{"location":"general/helloworld/","title":"Hello World Compose","text":""},{"location":"general/helloworld/#setup-the-project","title":"Setup the project","text":"<p>First setup your Project Setup</p>"},{"location":"general/helloworld/#write-a-simple-compose-function","title":"Write a simple Compose function","text":"<p>A basic Compose View is using a normal Kotlin function which is annotated with @Composable</p> <pre><code>@Composable\nfun HelloWorld() {\nText(\"Hello World!\")\n}\n</code></pre>"},{"location":"general/helloworld/#use-a-compose-function-as-a-view-in-your-android-app","title":"Use a Compose function as a view in your android app","text":"<p>To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity.</p> <pre><code>class MainActivity : AppCompatActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\n\nsetContent {\nHelloWorld()\n}\n}\n}\n</code></pre>"},{"location":"general/modifier/","title":"Modifier","text":""},{"location":"general/modifier/#modifier","title":"Modifier","text":"<p>Modifiers can be used modify certain aspects of a Composable. To set them, a Composable needs to accept a modifier as a parameter.</p>"},{"location":"general/modifier/#combine-modifiers","title":"Combine modifiers","text":"<p><pre><code>Column(modifier = Modifier.height(500.dp).padding(100.dp)) {\nText(\"Hello\")\n}\n</code></pre> You can chain multiple modifiers. The order is important modifier elements to the left are applied before modifier elements to the right.</p>"},{"location":"general/modifier/#some-modifiers","title":"Some Modifiers","text":"<p>The Compose libraries already contain some useful modifiers.</p>"},{"location":"general/modifier/#layoutmodifier","title":"LayoutModifier","text":""},{"location":"general/modifier/#modifierwidth","title":"Modifier.width()","text":"<p>You can use this to set the width of a Composable.</p>"},{"location":"general/modifier/#modifierheight","title":"Modifier.height()","text":"<p>You can use this to set the height of a Composable.</p>"},{"location":"general/modifier/#modifiersize","title":"Modifier.size()","text":"<p>You can use this to set the width and height of a Composable.</p>"},{"location":"general/modifier/#modifierfillmaxheight","title":"Modifier.fillMaxHeight()","text":"<p>This will set the height of the Composable to the maximum available height. This is similar to MATCH_PARENT from the classic View system.</p>"},{"location":"general/modifier/#modifierfillmaxwidth","title":"Modifier.fillMaxWidth()","text":"<p>This will set the width of the Composable to the maximum available width. This is similar to MATCH_PARENT from the classic View system.</p>"},{"location":"general/modifier/#modifierfillmaxsize","title":"Modifier.fillMaxSize()","text":"<p>This will set the height/width of the Composable to the maximum available height/width</p>"},{"location":"general/modifier/#modifierpadding","title":"Modifier.padding()","text":"<p>You can use Modifier.padding to set padding to Composables that take a modifier as an argument.</p> <p> </p> <pre><code>@Composable\nfun PaddingDemo() {\n\nColumn {\nText(\"TextWithoutPadding\")\nColumn(modifier = Modifier.padding(start = 80.dp)){\nText(\"TextWith80dpOnlyLeftPadding\")\n}\n\nColumn(Modifier.padding(all = 80.dp)){\nText(\"TextWith80dpPadding\")\n}\n}\n}\n</code></pre>"},{"location":"general/modifier/#drawmodifier","title":"DrawModifier","text":""},{"location":"general/modifier/#modifierbackground","title":"Modifier.background()","text":"<p>With this modifier you can set a background color/shape for the Composable</p>"},{"location":"general/modifier/#modifierclip","title":"Modifier.clip()","text":"<p>This modifier can clip the Composable to rectangle, rounded, or circle</p>"},{"location":"general/modifier/#gesturemodifier","title":"GestureModifier","text":""},{"location":"general/modifier/#modifierclickable","title":"Modifier.clickable","text":"<p>Configure component to receive clicks via input or accessibility \u201cclick\u201d event.</p>"},{"location":"general/modifier/#modifierscrollable","title":"Modifier.scrollable","text":"<p>You can use this to make a Composable scrollable</p>"},{"location":"general/modifier/#modifierdraggable","title":"Modifier.draggable","text":"<p>You can use this to make a Composable draggable</p>"},{"location":"general/modifier/#modifierswipeable","title":"Modifier.swipeable","text":"<p>You drag elements which, when released, animate towards typically two or more anchor points defined in an orientation</p>"},{"location":"general/modifier/#multitouch-panning-zooming-rotating","title":"Multitouch: Panning, zooming, rotating","text":"<p>To detect multitouch gestures used for panning, zooming and rotating, you can use the <code>transformable</code> modifier. This modifier does not transform elements by itself, it only detects the gestures.</p>"},{"location":"general/modifier/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> </ul>"},{"location":"general/navigation/","title":"Navigation","text":""},{"location":"general/navigation/#on-android","title":"On Android","text":"<p>In Android Projects you can use the Jetpack Compose Navigation</p> <p>Codelab Jetpack Compose Navigation</p>"},{"location":"general/navigation/#multiplatform","title":"Multiplatform","text":"<p>When you need a multiplaform solution for Routing, you can use Decompose</p> <p>Decompose Router Overview</p>"},{"location":"general/roadmap/","title":"Roadmap","text":"<p>You can find the road map here: https://developer.android.com/jetpack/androidx/compose-roadmap</p>"},{"location":"general/state/","title":"State","text":""},{"location":"general/state/#state","title":"State","text":""},{"location":"general/state/#define-a-state","title":"Define a state","text":"<pre><code>val textState = mutableStateOf(\"Hello\")\n</code></pre> <p>You can use the mutableStateOf function to create a mutable state.</p>"},{"location":"general/state/#example","title":"Example","text":"<p>In this example we will create a composable with a Text and a Button. On a click on the button, the count state will go up and the text of Text will be updated.</p> <p> Initial state: </p> <p> After Button click: </p> <pre><code>@Composable\nfun StateDemo(){\nval countState = remember { mutableStateOf(0) }\nColumn {\nButton(colors = ButtonDefaults.buttonColors(backgroundColor = MaterialTheme.colors.secondary), onClick = { countState.value++ }) {\nText(\"count up\")\n}\nText(\"You have clicked the Button \" + countState.value.toString() + \" times\")\n}\n}\n</code></pre> <pre><code>val countState = remember { mutableStateOf(0) }\n</code></pre> <p>Here we define the state for the click counter with mutableStateOf(0). 0 will be the initial value. Because 0 is an Int, the counterState will only allow values which are Int.</p> <p>remember is used to remember the countstate. Without remember, every time the value of countstate would change, the StateDemo Composable will be recomposed and your state will also get recreated with the initial value. When you use remember it will remember the last value and not be recreated.</p> <p><pre><code>countState.value\n</code></pre> With the value property you can get/set the value of the counterstate. In the onClick() function of the Button, the value will be incremented. The Text shows the value of the counterstate. When counterstate is changed,  \u201cText\u201d will also change.</p>"},{"location":"general/state/#see-also","title":"See also:","text":"<ul> <li>Codelab: Using state in Jetpack Compose</li> </ul> <ul> <li>Invest in Real State: A workshop for State in Compose</li> </ul>"},{"location":"general/testing/","title":"UI Testing","text":""},{"location":"general/testing/#setup","title":"Setup","text":"<p>Add the Compose testing library to your dependencies in build.gradle</p> <pre><code>androidTestImplementation(\"androidx.ui:ui-test:$compose_version\")\ndebugImplementation(\"androidx.compose.ui:ui-test-manifest:$compose_version\")\n</code></pre>"},{"location":"general/testing/#example","title":"Example","text":"<p>Let\u2019s say you have the following example code, it\u2019s a button with a text that says Hello and when you click on it, it turns to Bye</p> <pre><code>@Composable\nfun TestingExample() {\nval state = remember { mutableStateOf(\"Hello\") }\nButton(onClick = { state.value = \"Bye\" }) {\nText(state.value)\n}\n}\n</code></pre>"},{"location":"general/testing/#testrule","title":"TestRule","text":"<p>To run this Composable in your test Code you have 2 options:</p>"},{"location":"general/testing/#1-createcomposerule","title":"1) createComposeRule()","text":"<pre><code>@Rule\n@JvmField\nvar composeTestRule: ComposeContentTestRule = createComposeRule()\n</code></pre> <p>You can use this when you want to run your Composable without a specific Activity. You can then use the setContent() from the TestRule to host your Composable.</p> <pre><code>composeTestRule.setContent {\nTestingExample()\n}\n</code></pre>"},{"location":"general/testing/#2-createandroidcomposerule","title":"2) createAndroidComposeRule()","text":"<pre><code>@Rule\n@JvmField\nvar composeTestRule: ComposeContentTestRule = createAndroidComposeRule&lt;UiTestingDemoActivity&gt;()\n</code></pre> <p>You can use this when you want to start your test with a specific Activity.</p>"},{"location":"general/testing/#interaction-with-composables","title":"Interaction with Composables","text":"<p>Now we want to test how the Composable reacts when we interact with it.  Usually in Tests we would use Espresso for that, but you can use that only for classic Android Views and not for Composables.</p> <p>The ComposeTestRule will offer a similar API</p> <pre><code>class ExampleUiTestWithAndroidComposeRule {\n\n@Rule\n@JvmField\nvar composeTestRule: ComposeContentTestRule = createAndroidComposeRule&lt;UiTestingDemoActivity&gt;()\n\n@Test\nfun whenIClickOnButton_TheTextShouldChange() {\ncomposeTestRule.onNodeWithText(\"Hello\").assertExists()\ncomposeTestRule.onNodeWithText(\"Hello\").performClick()\ncomposeTestRule.onNodeWithText(\"Hello\").assertDoesNotExist()\ncomposeTestRule.onNodeWithText(\"Bye\").assertExists()\n}\n\n}\n</code></pre> <p>As you can see above we used the TestRule methods to click on the node with the text Hello and asserted that the text changed to Bye</p> <p>The TestRule offers a lot of different methods. You can find a cheatSheet here </p>"},{"location":"general/testing/#testtags","title":"TestTags","text":"<p>The test above is only half correct, because it looks for the text inside the button and not the button itself. Composables have no resource ids so we cant just use onView(withId(R.id.my_view)) to find a Composable in a test, also we can\u2019t find Composables of a specific \u201ctype\u201d  like a button, because everything is just a Composable function. </p> <p>When you can\u2019t find a Composable by a text and you want to make it detectable in your test. Jetpack Compose offers the concept of a TestTag. testTag is a modifier that needs to be set to a Composable. It expects a string which will be used as a reference in your test.</p> <pre><code>@Composable\nfun TestingExample() {\nval state = remember { mutableStateOf(\"Hello\") }\nButton(onClick = { state.value = \"Bye\" }, modifier = Modifier.testTag(\"MyTestTag\")) {\nText(state.value)\n}\n}\n</code></pre> <p>Now you can use onNodeWithTag(\u201cMyTestTag\u201d) to find the button Composable.</p> <pre><code>@Test\nfun whenIClickOnButton_TheTextShouldChange() {\ncomposeTestRule.onNodeWithTag(\"MyTestTag\").assertTextEquals(\"Hello\")\ncomposeTestRule.onNodeWithTag(\"MyTestTag\").performClick()\ncomposeTestRule.onNodeWithText(\"Hello\").assertDoesNotExist()\ncomposeTestRule.onNodeWithTag(\"MyTestTag\").assertTextEquals(\"Bye\")\n}\n</code></pre>"},{"location":"general/testing/#printtolog","title":"PrintToLog","text":"<p>When you want to get more information about how the node tree of a Composable looks like,  you can use printToLog() on a node.</p> <pre><code>composeTestRule.onNodeWithTag(\"MyTestTag\").printToLog(\"XXX\")\n</code></pre> <p>will print to logcat:</p> <pre><code>2022-01-07 22:58:55.048 9567-9587/de.jensklingenberg.jetpackcomposeplayground D/XXX: printToLog:\nPrinting with useUnmergedTree = 'false'\nNode #2 at (l=0.0, t=325.0, r=195.0, b=424.0)px, Tag: 'MyTestTag'\nRole = 'Button'\nText = '[Hello]'\nActions = [OnClick, GetTextLayoutResult]\nMergeDescendants = 'true'\n</code></pre>"},{"location":"general/testing/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> <li>Full Example Code</li> </ul>"},{"location":"general/preview/preview/","title":"Preview","text":""},{"location":"general/preview/preview/#preview_1","title":"Preview","text":"<p>You can use the @Preview annotation to preview compose functions inside Android Studio. Preview can not be used on Composables that have parameters without a default parameter.</p> <p><pre><code>@Preview\n@Composable\nfun TextDemo(){\nText(\"Hello\")\n}\n\n@Preview(name = \"MyPreviewName\")\n@Composable\nfun TextDemo2(){\nText(\"Hello\")\n}\n</code></pre> Android Studio Preview</p> <p> </p>"},{"location":"general/preview/preview/#group-previews","title":"Group Previews","text":"<p><pre><code> @Preview(group = \"TestGroup1\")\n</code></pre> The Preview annotation has a group parameter. You can use it to set a group name to your previews.</p> <p> </p> <p>The layout preview will now have an option to filter all the previews by the group name.</p>"},{"location":"general/preview/preview/#interactive-previews","title":"Interactive Previews","text":"<p>Above a generated preview in Android Studio you will find an \u201cInteractive\u201d Button. It will open your Composable in an interactive preview mode where can try your Composable directly inside Android Studio.</p>"},{"location":"general/preview/preview/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> </ul>"},{"location":"general/preview/previewparameter/","title":"PreviewParameter","text":"<p>You can use @PreviewParameter to provide sample data for your Composables. Let\u2019s say you have the following Composable and you want to generate a preview.</p> <pre><code>data class User(val name :String,val age:Int)\n\n@Composable\nfun UserInfo(user:User) {\nText(user.name+ \" \"+user.age)\n}\n</code></pre> <p>Because UserInfo needs a User you can\u2019t directly use @Preview. One way is to wrap your Composable in a Composable that provides a User</p> <pre><code>@Preview\n@Composable\nfun UserPreview() {\nUserInfo(user = User(\"Jens\", 31))\n}\n</code></pre> <p>An other way is to use @PreviewParameter on the parameter. With PreviewParameter you can set a class which will provide values for the needed User</p> <pre><code>@Preview\n@Composable\nfun UserInfo(@PreviewParameter(SampleUserProvider::class) user:User) {\nText(user.name+ \" \"+user.age)\n}\n</code></pre>"},{"location":"general/preview/previewparameter/#create-previewparameterprovider","title":"Create PreviewParameterProvider","text":"<p>SampleUserProvider::class will be the class which provides a User. To create a PreviewParameterProvider you need to implement the interface PreviewParameterProvider. The interface has two properties.</p> <p>values is a sequence of your sample data.</p> <pre><code>class SampleUserProvider: PreviewParameterProvider&lt;User&gt; {\noverride val values = sequenceOf(User(\"Jens\",31),User(\"Jim\",44))\n}\n</code></pre>"},{"location":"general/preview/previewparameter/#use-previewparameterprovider","title":"Use PreviewParameterProvider","text":"<p>You can annotate your parameter with @PreviewParameter and the class which provides the sample data.</p> <pre><code>@Preview\n@Composable\nfun UserInfo(@PreviewParameter(SampleUserProvider::class) user:User) {\nText(user.name+ \" \"+user.age)\n}\n</code></pre> <p>Now Android Studio will generate a preview of the Composable for every value that your provider provides.</p> <p> </p> <p>You can limit the amount of previews by settings a limit to PreviewParameter.</p> <pre><code>@PreviewParameter(SampleUserProvider::class,1)\n</code></pre>"},{"location":"layout/box/","title":"Box","text":""},{"location":"layout/box/#box","title":"Box","text":"<p>The children of the Box layout will be stacked over each other. You can use the align modifier to specify where the composable should be drawn.</p> <p> </p> <pre><code>@Composable\nfun BoxExample() {\nBox(Modifier.fillMaxSize()) {\nText(\"This text is drawn first\", modifier = Modifier.align(Alignment.TopCenter))\nBox(\nModifier.align(Alignment.TopCenter).fillMaxHeight().width(\n50.dp\n).background(Color.Blue)\n)\nText(\"This text is drawn last\", modifier = Modifier.align(Alignment.Center))\nFloatingActionButton(\nmodifier = Modifier.align(Alignment.BottomEnd).padding(12.dp),\nonClick = {}\n) {\nText(\"+\")\n}\n}\n}\n</code></pre>"},{"location":"layout/box/#content-alignment","title":"Content Alignment","text":"<p>You can use the align modifier to set the position of a Composable inside the Box</p>"},{"location":"layout/box/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"layout/column/","title":"Column","text":""},{"location":"layout/column/#column","title":"Column","text":"<p>A Column will show each child below the previous children. It\u2019s similar to a LinearLayout with vertical orientation.</p> <p> </p> <pre><code>@Composable\nfun ColumnExample() {\nColumn {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre>"},{"location":"layout/column/#content-alignment","title":"Content Alignment","text":""},{"location":"layout/column/#horizontal","title":"Horizontal","text":"<p>You can use horizontalAlignment to set the horizontal alignment of the content in the Column</p> Alignment.StartAlignment.CenterHorizontallyAlignment.End <p><p> </p> <pre><code>@Composable\nfun ColumnCenterHorizontal() {\nColumn(horizontalAlignment = Alignment.Start, modifier = Modifier.width(200.dp)) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n\n}\n</code></pre></p> <p><p> </p> <pre><code>@Composable\nfun ColumnCenterHorizontal() {\nColumn(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.width(200.dp)) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n\n}\n</code></pre></p> <p><p> </p> <pre><code>@Composable\nfun ColumnCenterHorizontal() {\nColumn(horizontalAlignment = Alignment.End, modifier = Modifier.width(200.dp)) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n\n}\n</code></pre></p> <p>You can also use the align modifier:</p> Modifier.align(Alignment.Start)Modifier.align(Alignment.CenterHorizontally)Modifier.align(Alignment.End) <p><p> </p> <pre><code>@Composable\nfun ColumnCenterHorizontal() {\nColumn(modifier = Modifier.width(200.dp)) {\nText(\"Hello World!\")\nText(\"Hello World!2\", modifier = Modifier.align(Alignment.Start))\n}\n}\n</code></pre></p> <p><p> </p> <pre><code>@Composable\nfun ColumnCenterHorizontal() {\nColumn(modifier = Modifier.width(200.dp)) {\nText(\"Hello World!\")\nText(\"Hello World!2\",modifier = Modifier.align(Alignment.CenterHorizontally))\n}\n}\n</code></pre></p> <p><p> </p> <pre><code>@Composable\nfun ColumnCenterHorizontal() {\nColumn(modifier = Modifier.width(200.dp)) {\nText(\"Hello World!\")\nText(\"Hello World!2\",modifier = Modifier.align(Alignment.End))\n}\n\n}\n</code></pre></p>"},{"location":"layout/column/#vertical","title":"Vertical","text":"<p>You can use verticalArrangement to set the vertical alignment of the content in the Column</p> Arrangement.TopArrangement.CenterArrangement.Bottom <p><p> </p> <pre><code>@Composable\nfun ColumnVerticalTop() {\nColumn(verticalArrangement = Arrangement.Top, modifier = Modifier.height(100.dp).background(Color.LightGray)) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre></p> <p><p> </p> <pre><code>@Composable\nfun ColumnVerticalCenter() {\nColumn(verticalArrangement = Arrangement.Center, modifier = Modifier.height(100.dp).background(Color.LightGray)) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre></p> <p><p> </p> <pre><code>@Composable\nfun ColumnVerticalBottom() {\nColumn(verticalArrangement = Arrangement.Bottom, modifier = Modifier.height(100.dp).background(Color.LightGray)) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre></p>"},{"location":"layout/column/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"layout/constraintlayout/","title":"ConstraintLayout","text":""},{"location":"layout/constraintlayout/#constraintlayout","title":"ConstraintLayout","text":"<p>Tip</p> <p>Remember to add dependencies to build.gradle:</p> <p>implementation \u2018androidx.constraintlayout:constraintlayout-compose:1.0.1\u2019</p> <p>A ConstraintLayout in Compose is similar to a ConstraintLayout from the classic Android View System</p>"},{"location":"layout/constraintlayout/#example","title":"Example:","text":"<pre><code>@Composable\nfun ConstraintLayoutDemo() {\nConstraintLayout(modifier = Modifier.size(200.dp)) {\nval (redBox, blueBox, yellowBox, text) = createRefs()\n\nBox(modifier = Modifier\n.size(50.dp)\n.background(Color.Red)\n.constrainAs(redBox) {})\n\nBox(modifier = Modifier\n.size(50.dp)\n.background(Color.Blue)\n.constrainAs(blueBox) {\ntop.linkTo(redBox.bottom)\nstart.linkTo(redBox.end)\n})\n\nBox(modifier = Modifier\n.size(50.dp)\n.background(Color.Yellow)\n.constrainAs(yellowBox) {\nbottom.linkTo(blueBox.bottom)\nstart.linkTo(blueBox.end, 20.dp)\n})\n\nText(\"Hello World\", modifier = Modifier.constrainAs(text) {\ntop.linkTo(parent.top)\nstart.linkTo(yellowBox.start)\n})\n\n}\n}\n</code></pre>"},{"location":"layout/constraintlayout/#how-to-use-it","title":"How to use it?","text":"<p>First add the Constraintlayout dependency to your project (see start of this page)</p> <p>I will use the example code above, to explain how the boxes are constraint to each other. Inside the scope of ConstraintLayout you can use createRefs() to create reference objects. These will be used by ConstraintLayout to know which Composables should be linked to each other.</p> <pre><code>val (redBox, blueBox, yellowBox, text) = createRefs()\n</code></pre> <p>Kotlin\u2019s destructuring declaration feature is used here to generate reference objects.</p> <p>Now we need to let ConstraintLayout know which reference objects belongs to which Composable. To do that you need to use the constrainAs Modifier on your Composable.</p> <pre><code>.constrainAs(redBox) {})\n</code></pre> <p>Now ConstraintLayout knows that redBox belongs to the first Box Composable.</p> <p>We do the same for the blue box, but now we want to link it to the red box.</p> <pre><code>.constrainAs(blueBox) {\ntop.linkTo(redBox.bottom)\nstart.linkTo(redBox.end)\n})\n</code></pre> <p>Inside the scope of constrainAs we have access to the ConstrainScope. We can now link start/end/top/bottom of the Composable to Composables through the reference object. You can also link to the parent ConstraintLayout with the parent object. It\u2019s used at the Text Composable.</p>"},{"location":"layout/constraintlayout/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"layout/row/","title":"Row","text":""},{"location":"layout/row/#row","title":"Row","text":"<p>A Row will show each child next to the previous children. It\u2019s similar to a LinearLayout with a horizontal orientation.</p> <p> </p> <pre><code>@Composable\nfun RowExample() {\nRow {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre>"},{"location":"layout/row/#content-arrangement","title":"Content Arrangement","text":""},{"location":"layout/row/#horizontal","title":"Horizontal","text":"<p>You can use horizontalArrangement to set the horizontal arrangement of the content in the Row</p> Arrangement.SpaceEvenlyArrangement.CenterArrangement.End <p><p> </p></p> <pre><code>@Composable\nfun RowExample() {\nRow(horizontalArrangement = Arrangement.SpaceEvenly) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre> <p><p> </p></p> <pre><code>@Composable\nfun RowExample() {\nRow(horizontalArrangement = Arrangement.Center) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre> <p><p> </p></p> <pre><code>@Composable\nfun RowExample() {\nRow(horizontalArrangement = Arrangement.End) {\nText(\"Hello World!\")\nText(\"Hello World!2\")\n}\n}\n</code></pre>"},{"location":"layout/row/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/alertdialog/","title":"AlertDialog","text":""},{"location":"material/alertdialog/#alertdialog","title":"AlertDialog","text":"<p>Alert dialog is a Dialog which interrupts the user with urgent information, details or actions.</p> <p> </p> <pre><code>@Composable\nfun AlertDialogSample() {\nMaterialTheme {\nColumn {\nval openDialog = remember { mutableStateOf(false)  }\n\nButton(onClick = {\nopenDialog.value = true\n}) {\nText(\"Click me\")\n}\n\nif (openDialog.value) {\n\nAlertDialog(\nonDismissRequest = {\n// Dismiss the dialog when the user clicks outside the dialog or on the back\n// button. If you want to disable that functionality, simply use an empty\n// onCloseRequest.\nopenDialog.value = false\n},\ntitle = {\nText(text = \"Dialog Title\")\n},\ntext = {\nText(\"Here is a text \")\n},\nconfirmButton = {\nButton(\n\nonClick = {\nopenDialog.value = false\n}) {\nText(\"This is the Confirm Button\")\n}\n},\ndismissButton = {\nButton(\n\nonClick = {\nopenDialog.value = false\n}) {\nText(\"This is the dismiss Button\")\n}\n}\n)\n}\n}\n\n}\n}\n</code></pre>"},{"location":"material/alertdialog/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"material/badgedbox/","title":"BadgeBox","text":"<p>A <code>BadgeBox</code> is used to decorate content with a badge that can contain dynamic information, such as the presence of a new notification or a number of pending requests. Badges can be icon only or contain short text.</p> <p>A common use case is to display a badge with bottom navigation items. For more information, see Bottom Navigation</p> <p>A simple icon with badge example looks like:</p> <p> </p> <pre><code>@OptIn(ExperimentalMaterialApi::class)\n@Preview\n@Composable\nfun BadgeBoxDemo() {\nBottomNavigation {\nBottomNavigationItem(\nicon = {\nBadgedBox(badge = { Badge { Text(\"8\") } }) {\nIcon(\nIcons.Filled.Favorite,\ncontentDescription = \"Favorite\"\n)\n}\n\n},\nselected = false,\nonClick = {})\n}\n}\n</code></pre>"},{"location":"material/badgedbox/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"material/button/","title":"TextButton","text":""},{"location":"material/button/#button","title":"Button","text":"<p>A Button has a onClick-Function. You can add a Text-Composable or any other Composables as child elements of the Button.</p> <p> </p> <pre><code>@Composable\nfun ButtonExample() {\nButton(onClick = { /* Do something! */ }, colors = ButtonDefaults.textButtonColors(\nbackgroundColor = Color.Red\n)) {\nText(\"Button\")\n}\n}\n</code></pre>"},{"location":"material/button/#outlinedbutton","title":"OutlinedButton","text":"<pre><code>@Composable\nfun OutlinedButtonExample() {\nOutlinedButton(onClick = { /* Do something! */ }) {\nText(\"I'm an Outlined Button\")\n}\n}\n</code></pre>"},{"location":"material/button/#textbutton","title":"TextButton","text":"<pre><code>@Composable\nfun TextButtonExample() {\nTextButton(onClick = { /* Do something! */ }) {\nText(\"I'm a Text Button\")\n}\n}\n</code></pre>"},{"location":"material/button/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/card/","title":"Card","text":""},{"location":"material/card/#card","title":"Card","text":"<p>Card is the equivalent of a CardView in Compose</p> <p> </p> <pre><code>@Composable\nfun CardDemo() {\nCard(\nmodifier = Modifier\n.fillMaxWidth()\n.padding(15.dp)\n.clickable{ },  elevation = 10.dp\n) {\nColumn(\nmodifier = Modifier.padding(15.dp)\n) {\nText(\nbuildAnnotatedString {\nappend(\"welcome to \")\nwithStyle(style = SpanStyle(fontWeight = FontWeight.W900, color = Color(0xFF4552B8))\n) {\nappend(\"Jetpack Compose Playground\")\n}\n}\n)\nText(\nbuildAnnotatedString {\nappend(\"Now you are in the \")\nwithStyle(style = SpanStyle(fontWeight = FontWeight.W900)) {\nappend(\"Card\")\n}\nappend(\" section\")\n}\n)\n}\n}\n}\n</code></pre>"},{"location":"material/card/#see-also","title":"See also:","text":"<ul> <li>Material.io</li> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/checkbox/","title":"Checkbox","text":""},{"location":"material/checkbox/#checkbox","title":"Checkbox","text":"<pre><code>@Composable\nfun CheckBoxDemo() {\nval checkedState = remember { mutableStateOf(true) }\nCheckbox(\nchecked = checkedState.value,\nonCheckedChange = { checkedState.value = it }\n)\n}\n</code></pre>"},{"location":"material/checkbox/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/circularprogressindicator/","title":"CircularProgressIndicator","text":""},{"location":"material/circularprogressindicator/#circularprogressindicator","title":"CircularProgressIndicator","text":"<p>A CircularProgressIndicator can be used to display a progress in circular shape. There are two kinds:</p> <p>Indeterminate</p> <pre><code>CircularProgressIndicator()\n</code></pre> <p>When you use the CircularProgressIndicator without the progress parameter, it will run forever.</p> <p>Determinate</p> <pre><code>CircularProgressIndicator(progress = 0.5f)\n</code></pre> <p> </p> <p>When you set a value to the progress parameter, the indicator will be shown with that progress. E.g. a progress of 0.5f will fill it to the half.</p>"},{"location":"material/circularprogressindicator/#example","title":"Example","text":"<pre><code>@Composable\nfun CircularProgressIndicatorSample() {\nvar progress by remember { mutableStateOf(0.1f) }\nval animatedProgress = animateFloatAsState(\ntargetValue = progress,\nanimationSpec = ProgressIndicatorDefaults.ProgressAnimationSpec\n).value\n\nColumn(horizontalAlignment = Alignment.CenterHorizontally) {\nSpacer(Modifier.height(30.dp))\nText(\"CircularProgressIndicator with undefined progress\")\nCircularProgressIndicator()\nSpacer(Modifier.height(30.dp))\nText(\"CircularProgressIndicator with progress set by buttons\")\nCircularProgressIndicator(progress = animatedProgress)\nSpacer(Modifier.height(30.dp))\nOutlinedButton(\nonClick = {\nif (progress &lt; 1f) progress += 0.1f\n}\n) {\nText(\"Increase\")\n}\n\nOutlinedButton(\nonClick = {\nif (progress &gt; 0f) progress -= 0.1f\n}\n) {\nText(\"Decrease\")\n}\n}\n}\n</code></pre>"},{"location":"material/circularprogressindicator/#see-also","title":"See also:","text":"<ul> <li>Material.io</li> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/divider/","title":"Divider","text":""},{"location":"material/divider/#divider","title":"Divider","text":"<p>A divider is a thin line that groups content in lists and layouts.</p> <p> </p> <pre><code>@Composable\nfun DividerExample(){\nColumn {\nText(\"Foo\")\nDivider(startIndent = 8.dp, thickness = 1.dp, color = Color.Black)\nText(\"Bar\")\n}\n}\n</code></pre>"},{"location":"material/divider/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/dropdownmenu/","title":"DropdownMenu","text":""},{"location":"material/dropdownmenu/#dropdownmenu","title":"DropdownMenu","text":"<p>The DropdownMenu Composable can be used to create DropdownMenu.</p> <p> </p> <pre><code>fun DropdownMenu(\nexpanded: Boolean,\nonDismissRequest: () -&gt; Unit,\nmodifier: Modifier = Modifier,\noffset: DpOffset = DpOffset(0.dp, 0.dp),\nproperties: PopupProperties = PopupProperties(focusable = true),\ncontent: @Composable ColumnScope.() -&gt; Unit\n)\n</code></pre> <p>expanded If true, the popupmenu with the dropdownContent will be shown</p> <p>onDismissRequest Called when the menu should be dismiss</p> <pre><code>@Composable\nfun DropdownDemo() {\nvar expanded by remember { mutableStateOf(false) }\nval items = listOf(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\nval disabledValue = \"B\"\nvar selectedIndex by remember { mutableStateOf(0) }\nBox(modifier = Modifier.fillMaxSize().wrapContentSize(Alignment.TopStart)) {\nText(items[selectedIndex],modifier = Modifier.fillMaxWidth().clickable(onClick = { expanded = true }).background(\nColor.Gray))\nDropdownMenu(\nexpanded = expanded,\nonDismissRequest = { expanded = false },\nmodifier = Modifier.fillMaxWidth().background(\nColor.Red)\n) {\nitems.forEachIndexed { index, s -&gt;\nDropdownMenuItem(onClick = {\nselectedIndex = index\nexpanded = false\n}) {\nval disabledText = if (s == disabledValue) {\n\" (Disabled)\"\n} else {\n\"\"\n}\nText(text = s + disabledText)\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"material/dropdownmenu/#see-also","title":"See also:","text":"<ul> <li>Material.io</li> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/floatingactionbutton/","title":"FloatingActionButton","text":""},{"location":"material/floatingactionbutton/#floatingactionbutton","title":"FloatingActionButton","text":"<pre><code>fun FloatingActionButtonDemo() {\nFloatingActionButton(onClick = { /*do something*/}) {\nText(\"FloatingActionButton\")\n}\n}\n</code></pre>"},{"location":"material/floatingactionbutton/#extendedfloatingactionbutton","title":"ExtendedFloatingActionButton","text":"<pre><code>@Composable\nfun ExtendedFloatingActionButtonDemo() {\nExtendedFloatingActionButton(\nicon = { Icon(Icons.Filled.Favorite,\"\") },\ntext = { Text(\"FloatingActionButton\") },\nonClick = { /*do something*/ },\nelevation = FloatingActionButtonDefaults.elevation(8.dp)\n)\n}\n</code></pre>"},{"location":"material/floatingactionbutton/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/linearprogressindicator/","title":"LinearProgressIndicator","text":""},{"location":"material/linearprogressindicator/#linearprogressindicator","title":"LinearProgressIndicator","text":"<p>A LinearProgressIndicator can be used to display a progress in linear line, also known as a progress bar. There are two kinds:</p> <p>Indeterminate</p> <pre><code>LinearProgressIndicator()\n</code></pre> <p>When you use the LinearProgressIndicator without the progress parameter, it will run forever.</p> <p>Determinate</p> <pre><code>LinearProgressIndicator(progress = 0.5f)\n</code></pre> <p> </p> <p>When you set a value to the progress parameter, the indicator will be shown with that progress. E.g. a progress of 0.5f will fill it to the half.</p>"},{"location":"material/linearprogressindicator/#example","title":"Example","text":"<pre><code>@Composable\nfun LinearProgressIndicatorSample() {\nvar progress by remember { mutableStateOf(0.1f) }\nval animatedProgress = animateFloatAsState(\ntargetValue = progress,\nanimationSpec = ProgressIndicatorDefaults.ProgressAnimationSpec\n).value\n\nColumn(horizontalAlignment = Alignment.CenterHorizontally) {\n\nSpacer(Modifier.height(30.dp))\nText(\"LinearProgressIndicator with undefined progress\")\nLinearProgressIndicator()\nSpacer(Modifier.height(30.dp))\nText(\"LinearProgressIndicator with progress set by buttons\")\nLinearProgressIndicator(progress = animatedProgress)\nSpacer(Modifier.height(30.dp))\nOutlinedButton(\nonClick = {\nif (progress &lt; 1f) progress += 0.1f\n}\n) {\nText(\"Increase\")\n}\n\nOutlinedButton(\nonClick = {\nif (progress &gt; 0f) progress -= 0.1f\n}\n) {\nText(\"Decrease\")\n}\n}\n}\n</code></pre>"},{"location":"material/linearprogressindicator/#see-also","title":"See also:","text":"<ul> <li>Material.io</li> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/modalbottomsheetlayout/","title":"ModalBottomSheetLayout","text":""},{"location":"material/modalbottomsheetlayout/#modalbottomsheetlayout","title":"ModalBottomSheetLayout","text":""},{"location":"material/modalbottomsheetlayout/#example","title":"Example","text":"<pre><code>@Composable\n@OptIn(ExperimentalMaterialApi::class)\nfun ModalBottomSheetSample() {\nval state = rememberModalBottomSheetState(ModalBottomSheetValue.Hidden)\nval scope = rememberCoroutineScope()\nModalBottomSheetLayout(\nsheetState = state,\nsheetContent = {\nLazyColumn {\nitems(50) {\nListItem(\ntext = { Text(\"Item $it\") },\nicon = {\nIcon(\nIcons.Default.Favorite,\ncontentDescription = \"Localized description\"\n)\n}\n)\n}\n}\n}\n) {\nColumn(\nmodifier = Modifier.fillMaxSize().padding(16.dp),\nhorizontalAlignment = Alignment.CenterHorizontally\n) {\nText(\"Rest of the UI\")\nSpacer(Modifier.height(20.dp))\nButton(onClick = { scope.launch { state.show() } }) {\nText(\"Click to show sheet\")\n}\n}\n}\n}\n</code></pre>"},{"location":"material/modalbottomsheetlayout/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/modaldrawer/","title":"ModalDrawer","text":""},{"location":"material/modaldrawer/#modaldrawer","title":"ModalDrawer","text":"<p>With a ModalDrawer you can create a navigation drawer.</p> DefaultWith Drawer open <p></p> <p></p> <pre><code>@Composable\nfun ModalDrawerSample() {\nval drawerState = rememberDrawerState(DrawerValue.Closed)\nval scope = rememberCoroutineScope()\n\nModalDrawer(\ndrawerState = drawerState,\ndrawerContent = {\nColumn {\nText(\"Text in Drawer\")\nButton(onClick = {\nscope.launch {\ndrawerState.close()\n}\n}) {\nText(\"Close Drawer\")\n}\n}\n},\ncontent = {\nColumn {\nText(\"Text in Bodycontext\")\nButton(onClick = {\n\nscope.launch {\ndrawerState.open()\n}\n\n}) {\nText(\"Click to open\")\n}\n}\n}\n)\n}\n</code></pre>"},{"location":"material/modaldrawer/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/navigationrail/","title":"NavigationRail","text":""},{"location":"material/navigationrail/#navigation-rail","title":"Navigation Rail","text":"<p>\u201cNavigation rails provide ergonomic movement between primary destinations in apps.\u201d </p>"},{"location":"material/navigationrail/#example","title":"Example","text":"<pre><code>enum class Page(val title:String, val content: String){\nHOME(\"home\",\"Show only icon\"),\nSEARCH(\"Search\",\"Show icon with label\"),\nSETTINGS(\"Settings\",\"Show icon /Show the label only when selected\")\n}\n\n@Composable\nfun NavigationRailSample() {\nvar selectedItem by remember { mutableStateOf(0) }\nval pages = Page.values()\nval icons = listOf(Icons.Filled.Home, Icons.Filled.Search, Icons.Filled.Settings)\nRow {\nNavigationRail {\npages.forEachIndexed { index, item -&gt;\nwhen(item){\nPage.HOME -&gt; {\nNavigationRailItem(\nicon = { Icon(icons[index], contentDescription = \"\") },\nselected = selectedItem == index,\nonClick = { selectedItem = index }\n)\n}\nPage.SEARCH -&gt; {\nNavigationRailItem(\nlabel = { Text(item.title) },\nicon = { Icon(icons[index], contentDescription = \"\") },\nselected = selectedItem == index,\nonClick = { selectedItem = index }\n)\n}\nPage.SETTINGS -&gt; {\nNavigationRailItem(\nlabel = { Text(item.title) },\nicon = { Icon(icons[index], contentDescription = \"\") },\nselected = selectedItem == index,\nonClick = { selectedItem = index },\nalwaysShowLabel = false\n)\n}\n}\n}\n}\n\nText(pages[selectedItem].content, Modifier.padding(start = 8.dp))\n}\n}\n</code></pre>"},{"location":"material/navigationrail/#see-also","title":"See also:","text":"<ul> <li>Material.io</li> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/radiobutton/","title":"RadioButton","text":""},{"location":"material/radiobutton/#radiobutton","title":"RadioButton","text":"<p>Radio buttons allow users to select one option from a set.</p> <p> </p>"},{"location":"material/radiobutton/#example","title":"Example","text":"<pre><code>@Composable\nfun RadioButtonSample() {\nval radioOptions = listOf(\"A\", \"B\", \"C\")\nval (selectedOption, onOptionSelected) = remember { mutableStateOf(radioOptions[1] ) }\nColumn {\nradioOptions.forEach { text -&gt;\nRow(\nModifier\n.fillMaxWidth()\n.selectable(\nselected = (text == selectedOption),\nonClick = {\nonOptionSelected(text)\n}\n)\n.padding(horizontal = 16.dp)\n) {\nRadioButton(\nselected = (text == selectedOption),\nonClick = { onOptionSelected(text) }\n)\nText(\ntext = text,\nstyle = MaterialTheme.typography.body1.merge(),\nmodifier = Modifier.padding(start = 16.dp)\n)\n}\n}\n}\n}\n</code></pre>"},{"location":"material/radiobutton/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/scaffold/","title":"Scaffold","text":""},{"location":"material/scaffold/#scaffold","title":"Scaffold","text":"<p>A Scaffold is a layout which implements the basic material design layout structure. You can add things like a TopBar, BottomBar, FAB or a Drawer.</p> <pre><code>@Composable\nfun ScaffoldDemo() {\nval materialBlue700= Color(0xFF1976D2)\nval scaffoldState = rememberScaffoldState(rememberDrawerState(DrawerValue.Open))\nScaffold(\nscaffoldState = scaffoldState,\ntopBar = { TopAppBar(title = {Text(\"TopAppBar\")},backgroundColor = materialBlue700)  },\nfloatingActionButtonPosition = FabPosition.End,\nfloatingActionButton = { FloatingActionButton(onClick = {}){\nText(\"X\")\n} },\ndrawerContent = { Text(text = \"drawerContent\") },\ncontent = { Text(\"BodyContent\") },\nbottomBar = { BottomAppBar(backgroundColor = materialBlue700) { Text(\"BottomAppBar\") } }\n)\n}\n</code></pre> DefaultWith Drawer open <p></p> <p></p>"},{"location":"material/scaffold/#scaffoldstate","title":"scaffoldState","text":"<p>With the scaffoldState you can set the opening state of the drawer(DrawerState.Opened or DrawerState.Closed)</p>"},{"location":"material/scaffold/#topbar","title":"topBar","text":"<p>Here you can set the part of your layout that should be displayed on top of the screen. You can use it for things like a toolbar. You can set any Composable, but TopAppBar is already made for this usecase.</p>"},{"location":"material/scaffold/#floatingactionbutton","title":"floatingActionButton","text":"<p>Here you can add FloatingActionButton. You can set any Composable, but FloatingActionButton is already made for this usecase</p>"},{"location":"material/scaffold/#floatingactionbuttonposition","title":"floatingActionButtonPosition","text":"<p>When you have added a FAB, you can use this specify the position of it. The default position is at the end of your layout.</p>"},{"location":"material/scaffold/#drawercontent","title":"drawerContent","text":"<p>Here you can set the content of your drawer.</p>"},{"location":"material/scaffold/#content","title":"Content","text":"<p>This is the primary content of the scaffold. You can add any Composable here.</p>"},{"location":"material/scaffold/#bottombar","title":"bottomBar","text":"<p>Here you can set the part of your layout is on bottom of the screen. You can set any Composable, but BottomAppBar is already made for this usecase.</p>"},{"location":"material/scaffold/#tips","title":"Tips","text":"<ul> <li>The bottombar is overlapping the content</li> </ul> <p>Inside the content lambda you have access to the PaddingValues. You can use calculateBottomPadding() to get the height of the bottombar and then set an extra padding to your content</p>"},{"location":"material/scaffold/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"material/slider/","title":"Slider","text":""},{"location":"material/slider/#slider","title":"Slider","text":"<p>\u201cSliders allow users to make selections from a range of values.\u201d</p> <p> </p> <pre><code>@Composable\nfun MySliderDemo() {\nvar sliderPosition by remember { mutableStateOf(0f) }\nText(text = sliderPosition.toString())\nSlider(value = sliderPosition, onValueChange = { sliderPosition = it })\n}\n</code></pre>"},{"location":"material/slider/#see-also","title":"See also:","text":"<ul> <li>Material.io</li> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/snackbar/","title":"Snackbar","text":""},{"location":"material/snackbar/#snackbar","title":"Snackbar","text":"<p>\u201cSnackbars provide brief messages about app processes at the bottom of the screen.\u201d</p> <p> </p> <pre><code>@Composable\nfun SnackbarDemo() {\nColumn {\nval (snackbarVisibleState, setSnackBarState) = remember { mutableStateOf(false) }\n\nButton(onClick = { setSnackBarState(!snackbarVisibleState) }) {\nif (snackbarVisibleState) {\nText(\"Hide Snackbar\")\n} else {\nText(\"Show Snackbar\")\n}\n}\nif (snackbarVisibleState) {\nSnackbar(\n\naction = {\nButton(onClick = {}) {\nText(\"MyAction\")\n}\n},\nmodifier = Modifier.padding(8.dp)\n) { Text(text = \"This is a snackbar!\") }\n}\n}\n}\n</code></pre>"},{"location":"material/snackbar/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/surface/","title":"Surface","text":""},{"location":"material/surface/#surface","title":"Surface","text":""},{"location":"material/surface/#example","title":"Example","text":"<pre><code>@Composable\nfun SurfaceDemo() {\nSurface(\nmodifier = Modifier.padding(8.dp),\nborder = BorderStroke(2.dp, Color.Red),\ncontentColor = Color.Blue,\nelevation = 8.dp,\nshape = CircleShape\n) {\nText(\"Hello World\", modifier = Modifier.padding(8.dp))\n}\n}\n</code></pre>"},{"location":"material/surface/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/switch/","title":"Switch","text":""},{"location":"material/switch/#switch","title":"Switch","text":"<pre><code>@Composable\nfun SwitchDemo() {\nval checkedState = remember { mutableStateOf(true) }\nSwitch(\nchecked = checkedState.value,\nonCheckedChange = { checkedState.value = it }\n)\n}\n</code></pre>"},{"location":"material/switch/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"material/textfield/","title":"TextField","text":""},{"location":"material/textfield/#textfield","title":"TextField","text":"<p>TextField can be used to insert text. This is the equivalent to EditText from the Android View system.</p> <p> </p> <pre><code>@Composable\nfun TextFieldDemo() {\nColumn(Modifier.padding(16.dp)) {\nval textState = remember { mutableStateOf(TextFieldValue()) }\nTextField(\nvalue = textState.value,\nonValueChange = { textState.value = it }\n)\nText(\"The textfield has this text: \" + textState.value.text)\n}\n}\n</code></pre>"},{"location":"material/textfield/#see-also","title":"See also:","text":"<ul> <li>Handle changes in a TextField</li> <li>Full Example Code</li> </ul>"},{"location":"material/topappbar/","title":"TopAppBar","text":""},{"location":"material/topappbar/#topappbar","title":"TopAppBar","text":"<p>A TopAppBar displays information and actions relating to the current screen and is placed at the top of the screen.</p> <p> </p> <pre><code>@Composable\nfun TopAppBarSample(){\nColumn {\nTopAppBar(\nelevation = 4.dp,\ntitle = {\nText(\"I'm a TopAppBar\")\n},\nbackgroundColor =  MaterialTheme.colors.primarySurface,\nnavigationIcon = {\nIconButton(onClick = {/* Do Something*/ }) {\nIcon(Icons.Filled.ArrowBack, null)\n}\n}, actions = {\nIconButton(onClick = {/* Do Something*/ }) {\nIcon(Icons.Filled.Share, null)\n}\nIconButton(onClick = {/* Do Something*/ }) {\nIcon(Icons.Filled.Settings, null)\n}\n})\n\nText(\"Hello World\")\n\n}\n}\n</code></pre>"},{"location":"material/topappbar/#see-also","title":"See also:","text":"<ul> <li>Full Example Code</li> </ul>"},{"location":"platform/composeview/","title":"ComposeView","text":"<p>You can use ComposeView to use Compose inside a ViewGroup. This example will show you, how you can use ComposeView inside a FrameLayout. It should also work in other layouts like LinearLayout</p>"},{"location":"platform/composeview/#create-a-custom-framelayout","title":"Create a custom FrameLayout","text":"<p>Create a custom FrameLayout, then you can use the ComposeView and setContent() for example inside init(). Inside setContent() you can then add your Compose code. <pre><code>class ComposeFrameLayout @JvmOverloads constructor(\ncontext: Context, attrs: AttributeSet? = null,\ndefStyleAttr: Int = 0\n) : FrameLayout(context, attrs, defStyleAttr) {\n\ninit {\naddView(\nComposeView(context).apply {\nsetContent {\nButton(onClick = {}) {\nText(\"ComposeButton\")\n}\n}\n}\n)\n}\n}\n</code></pre></p>"},{"location":"platform/composeview/#add-it-to-your-layout-file","title":"Add it to your layout file","text":"<p>Just add your FrameLayout like any other layout. <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:id=\"@+id/container\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:orientation=\"vertical\"\ntools:context=\".MainActivity\"&gt;\n\n&lt;ComposeFrameLayout\nandroid:id=\"@+id/composeFrame\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:orientation=\"horizontal\" /&gt;\n\n&lt;Button\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"WidgetButton\"\n/&gt;\n&lt;/LinearLayout&gt;\n</code></pre></p> <p> </p>"},{"location":"ui/layout/subcomposelayout/","title":"SubComposeLayout","text":"<p>You can use SubComposeLayout to measure and resize Composables.</p>"},{"location":"ui/layout/subcomposelayout/#example","title":"Example","text":"<p>Let`s say you have a chat log this:</p> <p> </p> <p>And now you want to set the width of every composable to the width of the widest Composable </p> <p> </p> <p>You can use the SubComposeLayout to get the height/width of every child composable and then you can resize  the values to the one that you want. </p> <pre><code>@Composable\nfun SubComposeLayoutDemo() {\nResizeWidthColumn(Modifier.fillMaxWidth(), true) {\n\nBox(\nmodifier = Modifier\n.background(Color.Red)\n) {\nText(\"Hello\")\n}\n\nBox(\nmodifier = Modifier\n.padding(top = 8.dp)\n.background(Color.Red)\n) {\nText(\"This is a long messsage \\n and its longer\")\n}\n}\n}\n\n@Composable\nfun ResizeWidthColumn(modifier: Modifier, resize: Boolean, mainContent: @Composable () -&gt; Unit) {\nSubcomposeLayout(modifier) { constraints -&gt;\nval mainPlaceables = subcompose(SlotsEnum.Main, mainContent).map {\n// Here we measure the width/height of the child Composables\nit.measure(Constraints())\n}\n\n//Here we find the max width/height of the child Composables\nval maxSize = mainPlaceables.fold(IntSize.Zero) { currentMax, placeable -&gt;\nIntSize(\nwidth = maxOf(currentMax.width, placeable.width),\nheight = maxOf(currentMax.height, placeable.height)\n)\n}\n\nval resizedPlaceables: List&lt;Placeable&gt; =\nsubcompose(SlotsEnum.Dependent, mainContent).map {\nif (resize) {\n/** Here we rewrite the child Composables to have the width of\n                     * widest Composable\n                     */\nit.measure(\nConstraints(\nminWidth = maxSize.width\n)\n)\n} else {\n// Ask the child for its preferred size.\nit.measure(Constraints())\n}\n}\n\n/**\n         * We can place the Composables on the screen\n         * with layout() and the place() functions\n         */\n\nlayout(constraints.maxWidth, constraints.maxHeight) {\nresizedPlaceables.forEachIndexed { index, placeable -&gt;\nval widthStart = resizedPlaceables.take(index).sumOf { it.measuredHeight }\nplaceable.place(0, widthStart)\n}\n}\n}\n}\n\n\nenum class SlotsEnum {\nMain,\nDependent\n\n}\n</code></pre>"},{"location":"ui/layout/subcomposelayout/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"viewinterop/androidview/","title":"AndroidView","text":""},{"location":"viewinterop/androidview/#androidview","title":"AndroidView","text":"<p>Altough Compose itself is independent from the classic Android View system, in Android Apps it is possible to use Views(classes that extend android.view.View). In this example you will see how you can use android.widget.Button, android.widget.TextView and android.widget.ImageView alongside a Compose Button.</p> <p> </p> <p>In this code example you can see a <code>@Composable()</code> with a <code>Column()</code> and a counter state variable. The ImageView displays a drawable. The compose button and the wiget.Button will both update the counter variable and the TextView will display the value of counter.</p> <pre><code>@Composable\nfun EmbeddedAndroidViewDemo() {\nColumn {\n\n// Holds state\nval state = remember { mutableStateOf(0) }\n\n// widget.ImageView\nAndroidView(factory = { ctx -&gt;\n\n//  Initialize a View or View hierarchy here\n\nImageView(ctx).apply {\nval drawable = ContextCompat.getDrawable(ctx, R.drawable.composelogo)\nsetImageDrawable(drawable)\n}\n})\n\n// Compose Button\nandroidx.compose.material.Button(onClick = { state.value++ }) {\nText(\"MyComposeButton\")\n}\n\n// widget.Button\nAndroidView(factory = { ctx -&gt;\nandroid.widget.Button(ctx).apply {\ntext = \"MyAndroidButton\"\nlayoutParams = LinearLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT)\nsetOnClickListener {\nstate.value++\n}\n}\n}, modifier = Modifier.padding(8.dp))\n\n// widget.TextView\nAndroidView(factory = { ctx -&gt;\nTextView(ctx).apply {\nlayoutParams = LinearLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT)\n}\n}, update = {\n// Update TextView with the current state value\nit.text = \"You have clicked the buttons: \" + state.value.toString() + \" times\"\n})\n}\n}\n</code></pre>"},{"location":"viewinterop/androidview/#androidview_1","title":"AndroidView","text":"<p><pre><code>//androidx.compose.ui.viewinterop\n@Composable\nfun &lt;T : View&gt; AndroidView(\nfactory: (Context) -&gt; T,\nmodifier: Modifier = Modifier,\nupdate: (T) -&gt; Unit = NoOpUpdate\n) {\n...\n}\n</code></pre> AndroidView() is a Composable that can be used to add Android Views inside of a @Composable function.</p> <p>factory expects a function that gets an Android Context and will return a class that extends an Android View. This constructor function will only be executed at initial rendering and when a parent composable triggers a new execution. You can use the value of a state in here, but it will not observe any changes.</p> <p>modifier can be used to apply modifiers to the layout that will host the created View</p> <p>In the update function you will get the View that was created in ctor. This function is used to handle all updates of the composition tree. Here you can use your state objects and handle all the update logic.</p>"},{"location":"viewinterop/androidview/#see-also","title":"See also:","text":"<ul> <li>Official Docs</li> <li>Full Example Code</li> </ul>"},{"location":"web/overview/","title":"Compose for Web","text":"<p>JetBrains has released Compose for Web Version which is using the DOM Api https://blog.jetbrains.com/kotlin/2021/12/compose-multiplatform-1-0-is-going-live/#web</p> <p>You can find more information in the Kotlin Slack #compose-web or on their Github Repo https://github.com/JetBrains/compose-multiplatform</p>"}]}